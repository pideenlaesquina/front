{"ast":null,"code":"var _jsxFileName = \"/home/crmock/pideenlaequina/front/pages/index.js\";\nvar __jsx = React.createElement;\nimport React, { Component, Fragment } from 'react';\nimport Map from '../components/map.js';\n\nclass App extends Component {\n  componentDidMount() {\n    this.pos = this.initialPosition();\n    this.userPos = this.getUserPosition();\n    this.stores = this.getStores(this.pos);\n  }\n\n  async initialPosition() {\n    let pos = {\n      lat: 4.603843,\n      lng: -74.062705\n    };\n    let ip = await fetch('https://api.ipify.org').then(response => response.text());\n    pos = await fetch('https://api.ipgeolocation.io/ipgeo?apiKey=02ff42e6f29c453e8d60df6139f5f9ed&ip=' + ip).then(response => response.json());\n    return {\n      lat: parseFloat(pos.latitude),\n      lng: parseFloat(pos.longitude)\n    };\n  }\n\n  getUserPosition() {\n    let coordinates = null; //Updated from browser\n\n    if (navigator.geolocation) {\n      coordinates = navigator.geolocation.getCurrentPosition(function (position) {\n        return {\n          lat: position.coords.latitude,\n          lng: position.coords.longitude\n        };\n      }, function () {\n        return null;\n      });\n    }\n\n    console.log(coordinates);\n    return coordinates;\n  }\n\n  async getStores(pos) {\n    let url = 'https://front-iota.now.sh/api/stores?lat=' + pos.lat + '&lng=' + pos.lng;\n    let stores = await fetch(url).then(response => response.json());\n    return stores.stores;\n  }\n\n  render() {\n    return __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 7\n      }\n    }, __jsx(Map, {\n      pos: this.pos,\n      userPos: this.userPos,\n      stores: this.stores,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/crmock/pideenlaequina/front/pages/index.js"],"names":["React","Component","Fragment","Map","App","componentDidMount","pos","initialPosition","userPos","getUserPosition","stores","getStores","lat","lng","ip","fetch","then","response","text","json","parseFloat","latitude","longitude","coordinates","navigator","geolocation","getCurrentPosition","position","coords","console","log","url","render"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA0C,OAA1C;AACA,OAAOC,GAAP,MAAgB,sBAAhB;;AAEA,MAAMC,GAAN,SAAkBH,SAAlB,CAA4B;AAC1BI,EAAAA,iBAAiB,GACjB;AACE,SAAKC,GAAL,GAAS,KAAKC,eAAL,EAAT;AACA,SAAKC,OAAL,GAAa,KAAKC,eAAL,EAAb;AACA,SAAKC,MAAL,GAAc,KAAKC,SAAL,CAAe,KAAKL,GAApB,CAAd;AACD;;AAED,QAAMC,eAAN,GACA;AACE,QAAID,GAAG,GAAG;AAACM,MAAAA,GAAG,EAAC,QAAL;AAAgBC,MAAAA,GAAG,EAAE,CAAC;AAAtB,KAAV;AACA,QAAIC,EAAE,GAAG,MAAMC,KAAK,CAAC,uBAAD,CAAL,CAA+BC,IAA/B,CAAoCC,QAAQ,IAAEA,QAAQ,CAACC,IAAT,EAA9C,CAAf;AACAZ,IAAAA,GAAG,GAAG,MAAMS,KAAK,CAAC,mFAAiFD,EAAlF,CAAL,CAA2FE,IAA3F,CAAgGC,QAAQ,IAAEA,QAAQ,CAACE,IAAT,EAA1G,CAAZ;AACA,WAAO;AAACP,MAAAA,GAAG,EAACQ,UAAU,CAACd,GAAG,CAACe,QAAL,CAAf;AAA+BR,MAAAA,GAAG,EAACO,UAAU,CAACd,GAAG,CAACgB,SAAL;AAA7C,KAAP;AACD;;AAEDb,EAAAA,eAAe,GACf;AACE,QAAIc,WAAW,GAAG,IAAlB,CADF,CAGE;;AACA,QAAIC,SAAS,CAACC,WAAd,EACA;AACEF,MAAAA,WAAW,GAAGC,SAAS,CAACC,WAAV,CAAsBC,kBAAtB,CAAyC,UAASC,QAAT,EAAmB;AACxE,eAAO;AACLf,UAAAA,GAAG,EAAEe,QAAQ,CAACC,MAAT,CAAgBP,QADhB;AAELR,UAAAA,GAAG,EAAEc,QAAQ,CAACC,MAAT,CAAgBN;AAFhB,SAAP;AAID,OALa,EAKX,YAAW;AACZ,eAAO,IAAP;AACD,OAPa,CAAd;AAQD;;AACDO,IAAAA,OAAO,CAACC,GAAR,CAAYP,WAAZ;AACA,WAAOA,WAAP;AACD;;AAED,QAAMZ,SAAN,CAAgBL,GAAhB,EACA;AACE,QAAIyB,GAAG,GAAG,8CAA6CzB,GAAG,CAACM,GAAjD,GAAsD,OAAtD,GAA8DN,GAAG,CAACO,GAA5E;AACA,QAAIH,MAAM,GAAG,MAAMK,KAAK,CAACgB,GAAD,CAAL,CAAWf,IAAX,CAAgBC,QAAQ,IAAEA,QAAQ,CAACE,IAAT,EAA1B,CAAnB;AACA,WAAOT,MAAM,CAACA,MAAd;AACD;;AAEDsB,EAAAA,MAAM,GAAG;AACP,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,GAAD;AAAK,MAAA,GAAG,EAAE,KAAK1B,GAAf;AAAoB,MAAA,OAAO,EAAE,KAAKE,OAAlC;AAA2C,MAAA,MAAM,EAAE,KAAKE,MAAxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF;AAKD;;AAjDyB;;AAoD5B,eAAeN,GAAf","sourcesContent":["import React, { Component, Fragment} from 'react'\nimport Map from '../components/map.js'\n\nclass App extends Component {\n  componentDidMount() \n  {\n    this.pos=this.initialPosition()\n    this.userPos=this.getUserPosition()\n    this.stores = this.getStores(this.pos)\n  }\n\n  async initialPosition()\n  {\n    let pos = {lat:4.603843 , lng: -74.062705}\n    let ip = await fetch('https://api.ipify.org').then(response=>response.text())\n    pos = await fetch('https://api.ipgeolocation.io/ipgeo?apiKey=02ff42e6f29c453e8d60df6139f5f9ed&ip='+ip).then(response=>response.json())\n    return {lat:parseFloat(pos.latitude), lng:parseFloat(pos.longitude)}\n  }\n\n  getUserPosition()\n  {\n    let coordinates = null\n\n    //Updated from browser\n    if (navigator.geolocation) \n    {\n      coordinates = navigator.geolocation.getCurrentPosition(function(position) {\n        return({\n          lat: position.coords.latitude,\n          lng: position.coords.longitude\n        })\n      }, function() {\n        return null\n      })\n    }\n    console.log(coordinates)\n    return coordinates\n  }\n\n  async getStores(pos)\n  {\n    let url = 'https://front-iota.now.sh/api/stores?lat='+ pos.lat +'&lng='+pos.lng\n    let stores = await fetch(url).then(response=>response.json())\n    return stores.stores\n  }\n  \n  render() {\n    return (\n      <div>\n        <Map pos={this.pos} userPos={this.userPos} stores={this.stores}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}