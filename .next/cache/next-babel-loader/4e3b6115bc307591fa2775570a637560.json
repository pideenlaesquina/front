{"ast":null,"code":"\"use strict\";\n\nvar _mongodb = _interopRequireDefault(require(\"../../middleware/mongodb.js\"));\n\nvar _isomorphicUnfetch = _interopRequireDefault(require(\"isomorphic-unfetch\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// The main, exported, function of the endpoint,\n// dealing with the request and subsequent response\nmodule.exports = async (req, res) => {\n  // Get a database connection, cached or otherwise,\n  // using the connection string environment variable as the argument\n  const db = await (0, _mongodb.default)();\n  let json = await $.getJSON(\"../../babaria.json\", function (json) {\n    return json; // this will show the info it in firebug console\n  });\n  console.log(json); //   for (let index = 0; index < stores.length; index++) {\n  //     const element = stores[index]\n  //     const googlemaps_address = element.googlemaps_address;\n  //     if(googlemaps_address!=null && googlemaps_address!=\"\")\n  //     {\n  //       let url = process.env.GOOGLE_MAPS_API_URL + \"?address=\"+googlemaps_address+\"&key=\"+process.env.GOOGLE_MAPS_API_KEY\n  //       let res = await fetch(url)\n  //       let jres = await res.json()\n  //       let place = jres.results[0]\n  //       if(place!=null)\n  //       {\n  //         collection.update({_id:element._id}, {$set:{lat:place.geometry.location.lat, lng:place.geometry.location.lng, googlemaps_formatted_address:place.formatted_address, googlemaps_place_id:place.place_id}});\n  //         counter++\n  //       }\n  //       else{\n  //         console.log(googlemaps_address)\n  //         console.log(jres)\n  //       }\n  //     } \n  //   }\n  // Respond with a JSON string of all stores in the collection\n\n  res.status(200).json({\n    updated_entities: counter\n  });\n};","map":{"version":3,"sources":["/home/crmock/pideenlaequina/front/pages/api/upload.js"],"names":["module","exports","req","res","db","json","$","getJSON","console","log","status","updated_entities","counter"],"mappings":";;AAAA;;AACA;;;;AAEA;AACA;AACAA,MAAM,CAACC,OAAP,GAAiB,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AACnC;AACA;AACA,QAAMC,EAAE,GAAG,MAAM,uBAAjB;AAEA,MAAIC,IAAI,GAAG,MAAMC,CAAC,CAACC,OAAF,CAAU,oBAAV,EAAgC,UAASF,IAAT,EAAe;AAC9D,WAAOA,IAAP,CAD8D,CAClD;AACb,GAFgB,CAAjB;AAGAG,EAAAA,OAAO,CAACC,GAAR,CAAYJ,IAAZ,EARmC,CAUrC;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEE;;AACAF,EAAAA,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBL,IAAhB,CAAqB;AAACM,IAAAA,gBAAgB,EAACC;AAAlB,GAArB;AACD,CArCD","sourcesContent":["import Database from '../../middleware/mongodb.js'\nimport fetch from 'isomorphic-unfetch'\n\n// The main, exported, function of the endpoint,\n// dealing with the request and subsequent response\nmodule.exports = async (req, res) => {\n  // Get a database connection, cached or otherwise,\n  // using the connection string environment variable as the argument\n  const db = await Database()\n\n  let json = await $.getJSON(\"../../babaria.json\", function(json) {\n    return json // this will show the info it in firebug console\n  });\n  console.log(json)\n\n//   for (let index = 0; index < stores.length; index++) {\n//     const element = stores[index]\n//     const googlemaps_address = element.googlemaps_address;\n\n//     if(googlemaps_address!=null && googlemaps_address!=\"\")\n//     {\n      \n//       let url = process.env.GOOGLE_MAPS_API_URL + \"?address=\"+googlemaps_address+\"&key=\"+process.env.GOOGLE_MAPS_API_KEY\n//       let res = await fetch(url)\n//       let jres = await res.json()\n\n//       let place = jres.results[0]\n\n//       if(place!=null)\n//       {\n//         collection.update({_id:element._id}, {$set:{lat:place.geometry.location.lat, lng:place.geometry.location.lng, googlemaps_formatted_address:place.formatted_address, googlemaps_place_id:place.place_id}});\n//         counter++\n//       }\n//       else{\n//         console.log(googlemaps_address)\n//         console.log(jres)\n//       }\n//     } \n//   }\n\n  // Respond with a JSON string of all stores in the collection\n  res.status(200).json({updated_entities:counter})\n}"]},"metadata":{},"sourceType":"script"}