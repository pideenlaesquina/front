{"ast":null,"code":"var _jsxFileName = \"/home/crmock/pideenlaequina/front/components/LocationContextProvider.js\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component, createContext } from 'react';\nimport Context from \"./LocationContext\";\nimport createAuth0Client from '@auth0/auth0-spa-js'; // create a provider\n\nclass LocationContextProvider extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"initialLocation\", async () => {\n      await navigator.geolocation.getCurrentPosition(position => this.setState({\n        locationLat: position.coords.latitude,\n        locationLng: position.coords.longitude,\n        selectedLocationLat: position.coords.latitude,\n        selectedLocationLng: position.coords.longitude\n      }), err => async function () {\n        let ip = await fetch(process.env.IPIFY_URL).then(response => response.text());\n        let pos = await fetch(process.env.IPGEOLOCATION_API_URL + '/ipgeo?apiKey=' + process.env.IPGEOLOCATION_API_KEY + '&ip=' + ip).then(response => response.json());\n        this.setState({\n          locationLat: parseFloat(pos.latitude),\n          locationLng: parseFloat(pos.longitude),\n          selectedLocationLat: parseFloat(pos.latitude),\n          selectedLocationLng: parseFloat(pos.longitude)\n        });\n      });\n    });\n\n    _defineProperty(this, \"initializeAuth0\", async () => {\n      const auth0Client = await createAuth0Client(this.config);\n      const isAuthenticated = await auth0Client.isAuthenticated();\n      const user = isAuthenticated ? await auth0Client.getUser() : null;\n      this.setState({\n        auth0Client,\n        isLoading: false,\n        isAuthenticated,\n        user\n      });\n    });\n\n    this.state = {\n      location_lat: null,\n      location_lng: null,\n      selectedLocationLat: null,\n      selectedLocationLng: null,\n      featuredStores: null,\n      stores: null,\n      authClient: null,\n      isAuthenticated: false,\n      user: null,\n      isReady: false,\n      isLoading: true\n    };\n    this.config = {\n      domain: process.env.AUTH0_DOMAIN,\n      client_id: process.env.AUTH0_CLIENT_ID,\n      redirect_uri: window.location.origin\n    };\n    this.startedAt = new Date();\n  }\n\n  componentDidMount() {\n    this.initialLocation();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.state.selectedLocationLat != null && this.state.selectedLocationLng != null && prevState.selectedLocationLat != this.state.selectedLocationLat || prevState.selectedLocationLng != this.state.selectedLocationLng) {\n      console.log(\"Location change\");\n      this.featuredStores(this.state.selectedLocationLat, this.state.selectedLocationLng);\n      this.stores(this.state.selectedLocationLat, this.state.selectedLocationLng);\n    }\n\n    if (!this.state.isReady && this.state.selectedLocationLat != null && this.state.selectedLocationLng != null) {\n      console.log(\"Initial location -> isReady=true\");\n      let now = new Date();\n      let towait = now.getTime() + 2000 - this.startedAt.getTime();\n\n      if (towait > 0) {\n        setTimeout(() => {\n          this.setState({\n            isReady: true\n          });\n        }, towait);\n      } else {\n        this.setState({\n          isReady: true\n        });\n      }\n    }\n\n    if (this.state.isLoading && this.state.stores != null && this.state.featuredStores != null) {\n      console.log(\"Stores loaded\");\n      this.setState({\n        isLoading: false\n      });\n    }\n  }\n\n  updateLocation(newLat, newLng) {\n    this.setState({\n      selected_location_lat: parseFloat(newLat),\n      selected_location_lng: parseFloat(newLng),\n      isLoading: true\n    });\n  }\n\n  async featuredStores(lat, lng) {\n    let url = '/api/featuredStores?lat=' + lat + '&lng=' + lng;\n    let res = await fetch(url).then(response => response.json());\n    this.setState({\n      featuredStores: res.stores\n    });\n  }\n\n  async stores(lat, lng) {\n    let url = '/api/stores?lat=' + lat + '&lng=' + lng;\n    let res = await fetch(url).then(response => response.json());\n    this.setState({\n      stores: res.stores\n    });\n  }\n\n  render() {\n    const {\n      location_lat,\n      location_lng,\n      selectedLocationLat,\n      selectedLocationLng,\n      featuredStores,\n      stores,\n      authClient,\n      isAuthenticated,\n      user,\n      isReady,\n      isLoading\n    } = this.state;\n    const values = {\n      location_lat,\n      location_lng,\n      selectedLocationLat,\n      selectedLocationLng,\n      featuredStores,\n      stores,\n      isAuthenticated,\n      user,\n      isReady,\n      isLoading,\n      loginWithRedirect: (...p) => auth0Client.loginWithRedirect(...p),\n      getTokenSilently: (...p) => auth0Client.getTokenSilently(...p),\n      getIdTokenClaims: (...p) => auth0Client.getIdTokenClaims(...p),\n      logout: (...p) => auth0Client.logout(...p)\n    };\n    return __jsx(LocationContext.Provider, {\n      value: values,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 13\n      }\n    }, this.props.children);\n  }\n\n}\n\nexport default LocationContextProvider;","map":{"version":3,"sources":["/home/crmock/pideenlaequina/front/components/LocationContextProvider.js"],"names":["React","Component","createContext","Context","createAuth0Client","LocationContextProvider","constructor","props","navigator","geolocation","getCurrentPosition","position","setState","locationLat","coords","latitude","locationLng","longitude","selectedLocationLat","selectedLocationLng","err","ip","fetch","process","env","IPIFY_URL","then","response","text","pos","IPGEOLOCATION_API_URL","IPGEOLOCATION_API_KEY","json","parseFloat","auth0Client","config","isAuthenticated","user","getUser","isLoading","state","location_lat","location_lng","featuredStores","stores","authClient","isReady","domain","AUTH0_DOMAIN","client_id","AUTH0_CLIENT_ID","redirect_uri","window","location","origin","startedAt","Date","componentDidMount","initialLocation","componentDidUpdate","prevProps","prevState","console","log","now","towait","getTime","setTimeout","updateLocation","newLat","newLng","selected_location_lat","selected_location_lng","lat","lng","url","res","render","values","loginWithRedirect","p","getTokenSilently","getIdTokenClaims","logout","children"],"mappings":"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","sourcesContent":["import React, { Component, createContext } from 'react';\nimport Context from \"./LocationContext\"\nimport createAuth0Client from '@auth0/auth0-spa-js';\n\n// create a provider\nclass LocationContextProvider extends Component {\n   \n  constructor(props)\n  {\n    super(props)\n    this. state = {\n      location_lat:null,\n      location_lng: null,\n      selectedLocationLat: null,\n      selectedLocationLng: null,\n\n      featuredStores:null,\n      stores:null,\n\n      authClient: null,\n      isAuthenticated: false,\n      user:null,\n\n      isReady:false,\n      isLoading:true\n    }\n\n    this.config = {\n      domain: process.env.AUTH0_DOMAIN,\n      client_id: process.env.AUTH0_CLIENT_ID,\n      redirect_uri: window.location.origin\n    }\n\n    this.startedAt = new Date()\n  }\n\n  componentDidMount() {\n    this.initialLocation();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if(this.state.selectedLocationLat != null \n      && this.state.selectedLocationLng != null \n      && (\n        (prevState.selectedLocationLat != this.state.selectedLocationLat)) \n        || (prevState.selectedLocationLng != this.state.selectedLocationLng)\n      )\n    {\n      console.log(\"Location change\")\n      this.featuredStores(this.state.selectedLocationLat, this.state.selectedLocationLng)\n      this.stores(this.state.selectedLocationLat, this.state.selectedLocationLng)\n    }\n\n    if(\n        !this.state.isReady \n        && this.state.selectedLocationLat !=null\n        && this.state.selectedLocationLng !=null)\n    {\n      console.log(\"Initial location -> isReady=true\")\n      let now = new Date()\n      let towait = now.getTime() + 2000 - this.startedAt.getTime()\n      \n      if(towait>0)\n      {\n        setTimeout(() => {\n          this.setState({ isReady:true })\n        }, towait)\n      }\n      else\n      {\n        this.setState({ isReady:true })\n      }\n    }\n\n    if(this.state.isLoading \n      && this.state.stores != null \n      && this.state.featuredStores != null)\n    {\n      console.log(\"Stores loaded\")\n      this.setState({ isLoading:false })\n    }\n  }\n  \n  initialLocation = async () => {\n    await navigator.geolocation.getCurrentPosition(\n      position => this.setState({ \n        locationLat:position.coords.latitude, \n        locationLng:position.coords.longitude,\n        selectedLocationLat:position.coords.latitude, \n        selectedLocationLng: position.coords.longitude\n      }), \n      err => async function()\n      {\n        let ip = await fetch(process.env.IPIFY_URL).then(response=>response.text())\n        let pos = await fetch(process.env.IPGEOLOCATION_API_URL +'/ipgeo?apiKey='+process.env.IPGEOLOCATION_API_KEY+'&ip='+ip).then(response=>response.json())\n    \n        this.setState({ \n          locationLat:parseFloat(pos.latitude),\n          locationLng:parseFloat(pos.longitude),\n          selectedLocationLat:parseFloat(pos.latitude),\n          selectedLocationLng:parseFloat(pos.longitude)\n        })\n      }\n    )\n  }\n\n  updateLocation(newLat, newLng)\n  {\n    this.setState({ \n      selected_location_lat:parseFloat(newLat), \n      selected_location_lng:parseFloat(newLng),\n      isLoading: true\n    })\n  }\n\n  initializeAuth0 = async () => {\n    const auth0Client = await createAuth0Client(this.config)\n    const isAuthenticated = await auth0Client.isAuthenticated()\n    const user = isAuthenticated ? await auth0Client.getUser() : null\n\n    this.setState({ auth0Client, isLoading:false, isAuthenticated, user })\n  };\n\n  async featuredStores(lat, lng)\n  {\n    let url = '/api/featuredStores?lat='+ lat +'&lng='+lng\n    let res = await fetch(url).then(response=>response.json())\n    \n    this.setState({ featuredStores:res.stores })\n  }\n\n  async stores(lat, lng)\n  {\n    let url = '/api/stores?lat='+ lat +'&lng='+lng\n    let res = await fetch(url).then(response=>response.json())\n    \n    this.setState({ stores:res.stores })\n  }\n\n  render() {\n    const { \n      location_lat,\n      location_lng,\n      selectedLocationLat,\n      selectedLocationLng,\n\n      featuredStores,\n      stores,\n\n      authClient,\n      isAuthenticated,\n      user,\n\n      isReady,\n      isLoading\n    } = this.state;\n\n    const values = { \n      location_lat,\n      location_lng,\n      selectedLocationLat,\n      selectedLocationLng,\n\n      featuredStores,\n      stores,\n\n      isAuthenticated,\n      user,\n\n      isReady,\n      isLoading,\n\n      loginWithRedirect: (...p) => auth0Client.loginWithRedirect(...p),\n      getTokenSilently: (...p) => auth0Client.getTokenSilently(...p),\n      getIdTokenClaims: (...p) => auth0Client.getIdTokenClaims(...p),\n      logout: (...p) => auth0Client.logout(...p)\n    }\n  \n    return (<LocationContext.Provider value={values}>{this.props.children}</LocationContext.Provider>);\n  }\n}\n\nexport default LocationContextProvider"]},"metadata":{},"sourceType":"module"}