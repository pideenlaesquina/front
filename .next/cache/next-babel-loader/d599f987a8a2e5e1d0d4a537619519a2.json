{"ast":null,"code":"\"use strict\";\n\nvar _mongodb = _interopRequireDefault(require(\"../../middleware/mongodb.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// The main, exported, function of the endpoint,\n// dealing with the request and subsequent response\nmodule.exports = async (req, res) => {\n  if (req.query.lat != null && req.query.lng != null) {\n    // Get a database connection, cached or otherwise,\n    // using the connection string environment variable as the argument\n    let querry_lat = parseFloat(req.query.lat);\n    let querry_lng = parseFloat(req.query.lng);\n    const db = await (0, _mongodb.default)(); // Select the \"stores\" collection from the database\n\n    const collection = await db.collection('stores'); // Select the stores collection from the database\n\n    const stores = await collection.find({\n      lat: {\n        $gt: querry_lat - 0.005,\n        $lt: querry_lat + 0.005\n      },\n      lng: {\n        $gt: querry_lng - 0.005,\n        $lt: querry_lng + 0.005\n      }\n    }).toArray(); // Respond with a JSON string of all stores in the collection\n\n    res.status(200).json({\n      stores\n    });\n  } else {\n    res.status(400).json({\n      error: \"missing parameters\"\n    });\n  }\n};","map":{"version":3,"sources":["/home/crmock/pideenlaequina/front/pages/api/stores.js"],"names":["module","exports","req","res","query","lat","lng","querry_lat","parseFloat","querry_lng","db","collection","stores","find","$gt","$lt","toArray","status","json","error"],"mappings":";;AAAA;;;;AAEA;AACA;AACAA,MAAM,CAACC,OAAP,GAAiB,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AACnC,MAAGD,GAAG,CAACE,KAAJ,CAAUC,GAAV,IAAe,IAAf,IAAuBH,GAAG,CAACE,KAAJ,CAAUE,GAAV,IAAgB,IAA1C,EACA;AACE;AACA;AACA,QAAIC,UAAU,GAAGC,UAAU,CAACN,GAAG,CAACE,KAAJ,CAAUC,GAAX,CAA3B;AACA,QAAII,UAAU,GAAGD,UAAU,CAACN,GAAG,CAACE,KAAJ,CAAUE,GAAX,CAA3B;AAEA,UAAMI,EAAE,GAAG,MAAM,uBAAjB,CANF,CAQE;;AACA,UAAMC,UAAU,GAAG,MAAMD,EAAE,CAACC,UAAH,CAAc,QAAd,CAAzB,CATF,CAWE;;AACA,UAAMC,MAAM,GAAG,MAAMD,UAAU,CAACE,IAAX,CAAgB;AAAER,MAAAA,GAAG,EAAC;AAAES,QAAAA,GAAG,EAACP,UAAU,GAAC,KAAjB;AAAwBQ,QAAAA,GAAG,EAACR,UAAU,GAAC;AAAvC,OAAN;AAAsDD,MAAAA,GAAG,EAAC;AAAEQ,QAAAA,GAAG,EAACL,UAAU,GAAC,KAAjB;AAAwBM,QAAAA,GAAG,EAACN,UAAU,GAAC;AAAvC;AAA1D,KAAhB,EAA4HO,OAA5H,EAArB,CAZF,CAcE;;AACAb,IAAAA,GAAG,CAACc,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEN,MAAAA;AAAF,KAArB;AACD,GAjBD,MAkBI;AACFT,IAAAA,GAAG,CAACc,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACC,MAAAA,KAAK,EAAC;AAAP,KAArB;AACD;AACF,CAtBD","sourcesContent":["import Database from '../../middleware/mongodb.js'\n\n// The main, exported, function of the endpoint,\n// dealing with the request and subsequent response\nmodule.exports = async (req, res) => {\n  if(req.query.lat!=null && req.query.lng !=null)\n  {\n    // Get a database connection, cached or otherwise,\n    // using the connection string environment variable as the argument\n    let querry_lat = parseFloat(req.query.lat)\n    let querry_lng = parseFloat(req.query.lng)\n    \n    const db = await Database()\n\n    // Select the \"stores\" collection from the database\n    const collection = await db.collection('stores')\n\n    // Select the stores collection from the database\n    const stores = await collection.find({ lat:{ $gt:querry_lat-0.005, $lt:querry_lat+0.005 }, lng:{ $gt:querry_lng-0.005, $lt:querry_lng+0.005 } }).toArray()\n\n    // Respond with a JSON string of all stores in the collection\n    res.status(200).json({ stores })\n  }\n  else{\n    res.status(400).json({error:\"missing parameters\"})\n  }\n}"]},"metadata":{},"sourceType":"script"}