{"ast":null,"code":"\"use strict\";\n\nvar _mongodb = _interopRequireDefault(require(\"../../middleware/mongodb.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// The main, exported, function of the endpoint,\n// dealing with the request and subsequent response\nmodule.exports = async (req, res) => {\n  if (req.query.lat != null && req.query.lng != null) {\n    // Get a database connection, cached or otherwise,\n    // using the connection string environment variable as the argument\n    let querry_lat = parseFloat(req.query.lat);\n    let querry_lng = parseFloat(req.query.lng);\n    /* hola */\n\n    const db = await (0, _mongodb.default)(); // Select the \"stores\" collection from the database\n\n    const collection = await db.collection('stores2'); // Select the stores collection from the database\n\n    const stores = await collection.find({\n      lat: {\n        $gt: querry_lat - 0.01,\n        $lt: querry_lat + 0.01\n      },\n      lng: {\n        $gt: querry_lng - 0.01,\n        $lt: querry_lng + 0.01\n      }\n    }).toArray(); // Respond with a JSON string of all stores in the collection\n\n    res.status(200).json({\n      stores\n    });\n  } else {\n    res.status(400).json({\n      error: \"missing parameters\"\n    });\n  }\n};","map":{"version":3,"sources":["/home/crmock/pideenlaequina/front/pages/api/stores.js"],"names":["module","exports","req","res","query","lat","lng","querry_lat","parseFloat","querry_lng","db","collection","stores","find","$gt","$lt","toArray","status","json","error"],"mappings":";;AAAA;;;;AAEA;AACA;AACAA,MAAM,CAACC,OAAP,GAAiB,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AACnC,MAAID,GAAG,CAACE,KAAJ,CAAUC,GAAV,IAAiB,IAAjB,IAAyBH,GAAG,CAACE,KAAJ,CAAUE,GAAV,IAAiB,IAA9C,EAAoD;AAClD;AACA;AACA,QAAIC,UAAU,GAAGC,UAAU,CAACN,GAAG,CAACE,KAAJ,CAAUC,GAAX,CAA3B;AACA,QAAII,UAAU,GAAGD,UAAU,CAACN,GAAG,CAACE,KAAJ,CAAUE,GAAX,CAA3B;AACA;;AACA,UAAMI,EAAE,GAAG,MAAM,uBAAjB,CANkD,CAQlD;;AACA,UAAMC,UAAU,GAAG,MAAMD,EAAE,CAACC,UAAH,CAAc,SAAd,CAAzB,CATkD,CAWlD;;AACA,UAAMC,MAAM,GAAG,MAAMD,UAAU,CAACE,IAAX,CAAgB;AACnCR,MAAAA,GAAG,EAAE;AAAES,QAAAA,GAAG,EAAEP,UAAU,GAAG,IAApB;AAA0BQ,QAAAA,GAAG,EAAER,UAAU,GAAG;AAA5C,OAD8B;AAEnCD,MAAAA,GAAG,EAAE;AAAEQ,QAAAA,GAAG,EAAEL,UAAU,GAAG,IAApB;AAA0BM,QAAAA,GAAG,EAAEN,UAAU,GAAG;AAA5C;AAF8B,KAAhB,EAGlBO,OAHkB,EAArB,CAZkD,CAiBlD;;AACAb,IAAAA,GAAG,CAACc,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEN,MAAAA;AAAF,KAArB;AACD,GAnBD,MAoBK;AACHT,IAAAA,GAAG,CAACc,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,MAAAA,KAAK,EAAE;AAAT,KAArB;AACD;AACF,CAxBD","sourcesContent":["import Database from '../../middleware/mongodb.js'\n\n// The main, exported, function of the endpoint,\n// dealing with the request and subsequent response\nmodule.exports = async (req, res) => {\n  if (req.query.lat != null && req.query.lng != null) {\n    // Get a database connection, cached or otherwise,\n    // using the connection string environment variable as the argument\n    let querry_lat = parseFloat(req.query.lat)\n    let querry_lng = parseFloat(req.query.lng)\n    /* hola */\n    const db = await Database()\n\n    // Select the \"stores\" collection from the database\n    const collection = await db.collection('stores2')\n\n    // Select the stores collection from the database\n    const stores = await collection.find({\n      lat: { $gt: querry_lat - 0.01, $lt: querry_lat + 0.01 },\n      lng: { $gt: querry_lng - 0.01, $lt: querry_lng + 0.01 }\n    }).toArray()\n\n    // Respond with a JSON string of all stores in the collection\n    res.status(200).json({ stores })\n  }\n  else {\n    res.status(400).json({ error: \"missing parameters\" })\n  }\n}"]},"metadata":{},"sourceType":"script"}