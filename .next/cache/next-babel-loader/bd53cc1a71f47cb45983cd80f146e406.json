{"ast":null,"code":"\"use strict\";\n\nvar _mongodb = _interopRequireDefault(require(\"../../middleware/mongodb.js\"));\n\nvar _isomorphicUnfetch = _interopRequireDefault(require(\"isomorphic-unfetch\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// The main, exported, function of the endpoint,\n// dealing with the request and subsequent response\nmodule.exports = async (req, res) => {\n  // Get a database connection, cached or otherwise,\n  // using the connection string environment variable as the argument\n  const db = await (0, _mongodb.default)(); // Select the \"stores\" collection from the database\n\n  const collection = await db.collection('stores'); // Select the stores collection from the database\n\n  const stores = await collection.find({\n    $or: [{\n      lat: \"\"\n    }, {\n      lng: \"\"\n    }]\n  }).toArray();\n\n  for (let index = 0; index < stores.length; index++) {\n    const element = stores[index];\n    const googlemaps_address = element.googlemaps_address;\n\n    if (googlemaps_address != null && googlemaps_address != \"\") {\n      let url = process.env.GOOGLE_MAPS_API_URL + \"?address=\" + googlemaps_address + \"&key=\" + process.env.GOOGLE_MAPS_API_KEY;\n      let res = await (0, _isomorphicUnfetch.default)(url);\n      let jres = await res.json();\n      let place = jres.results[0];\n\n      if (place != null) {\n        collection.update({\n          _id: element._id\n        }, {\n          lat: place.geometry.location.lat,\n          lng: place.geometry.location.lng,\n          googlemaps_formatted_address: place.formatted_address,\n          googlemaps_place_id: place.place_id\n        });\n      } else {\n        console.log(googlemaps_address);\n        console.log(jres);\n      }\n    }\n  } // Respond with a JSON string of all stores in the collection\n\n\n  res.status(200).json({\n    stores\n  });\n};","map":{"version":3,"sources":["/home/crmock/pideenlaequina/front/pages/api/addresses.js"],"names":["module","exports","req","res","db","collection","stores","find","$or","lat","lng","toArray","index","length","element","googlemaps_address","url","process","env","GOOGLE_MAPS_API_URL","GOOGLE_MAPS_API_KEY","jres","json","place","results","update","_id","geometry","location","googlemaps_formatted_address","formatted_address","googlemaps_place_id","place_id","console","log","status"],"mappings":";;AAAA;;AACA;;;;AAEA;AACA;AACAA,MAAM,CAACC,OAAP,GAAiB,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AACnC;AACA;AACA,QAAMC,EAAE,GAAG,MAAM,uBAAjB,CAHmC,CAKnC;;AACA,QAAMC,UAAU,GAAG,MAAMD,EAAE,CAACC,UAAH,CAAc,QAAd,CAAzB,CANmC,CAQnC;;AACA,QAAMC,MAAM,GAAG,MAAMD,UAAU,CAACE,IAAX,CAAgB;AAAEC,IAAAA,GAAG,EAAC,CAAC;AAACC,MAAAA,GAAG,EAAC;AAAL,KAAD,EAAW;AAACC,MAAAA,GAAG,EAAC;AAAL,KAAX;AAAN,GAAhB,EAA8CC,OAA9C,EAArB;;AAEA,OAAK,IAAIC,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGN,MAAM,CAACO,MAAnC,EAA2CD,KAAK,EAAhD,EAAoD;AAClD,UAAME,OAAO,GAAGR,MAAM,CAACM,KAAD,CAAtB;AACA,UAAMG,kBAAkB,GAAGD,OAAO,CAACC,kBAAnC;;AAEA,QAAGA,kBAAkB,IAAE,IAApB,IAA4BA,kBAAkB,IAAE,EAAnD,EACA;AAEE,UAAIC,GAAG,GAAGC,OAAO,CAACC,GAAR,CAAYC,mBAAZ,GAAkC,WAAlC,GAA8CJ,kBAA9C,GAAiE,OAAjE,GAAyEE,OAAO,CAACC,GAAR,CAAYE,mBAA/F;AACA,UAAIjB,GAAG,GAAG,MAAM,gCAAMa,GAAN,CAAhB;AACA,UAAIK,IAAI,GAAG,MAAMlB,GAAG,CAACmB,IAAJ,EAAjB;AAEA,UAAIC,KAAK,GAAGF,IAAI,CAACG,OAAL,CAAa,CAAb,CAAZ;;AAEA,UAAGD,KAAK,IAAE,IAAV,EACA;AACElB,QAAAA,UAAU,CAACoB,MAAX,CAAkB;AAACC,UAAAA,GAAG,EAACZ,OAAO,CAACY;AAAb,SAAlB,EAAqC;AAACjB,UAAAA,GAAG,EAACc,KAAK,CAACI,QAAN,CAAeC,QAAf,CAAwBnB,GAA7B;AAAkCC,UAAAA,GAAG,EAACa,KAAK,CAACI,QAAN,CAAeC,QAAf,CAAwBlB,GAA9D;AAAmEmB,UAAAA,4BAA4B,EAACN,KAAK,CAACO,iBAAtG;AAAyHC,UAAAA,mBAAmB,EAACR,KAAK,CAACS;AAAnJ,SAArC;AACD,OAHD,MAII;AACFC,QAAAA,OAAO,CAACC,GAAR,CAAYnB,kBAAZ;AACAkB,QAAAA,OAAO,CAACC,GAAR,CAAYb,IAAZ;AACD;AACF;AACF,GAjCkC,CAmCnC;;;AACAlB,EAAAA,GAAG,CAACgC,MAAJ,CAAW,GAAX,EAAgBb,IAAhB,CAAqB;AAAEhB,IAAAA;AAAF,GAArB;AACD,CArCD","sourcesContent":["import Database from '../../middleware/mongodb.js'\nimport fetch from 'isomorphic-unfetch'\n\n// The main, exported, function of the endpoint,\n// dealing with the request and subsequent response\nmodule.exports = async (req, res) => {\n  // Get a database connection, cached or otherwise,\n  // using the connection string environment variable as the argument\n  const db = await Database()\n\n  // Select the \"stores\" collection from the database\n  const collection = await db.collection('stores')\n\n  // Select the stores collection from the database\n  const stores = await collection.find({ $or:[{lat:\"\"}, {lng:\"\"}] }).toArray()\n\n  for (let index = 0; index < stores.length; index++) {\n    const element = stores[index]\n    const googlemaps_address = element.googlemaps_address;\n\n    if(googlemaps_address!=null && googlemaps_address!=\"\")\n    {\n      \n      let url = process.env.GOOGLE_MAPS_API_URL + \"?address=\"+googlemaps_address+\"&key=\"+process.env.GOOGLE_MAPS_API_KEY\n      let res = await fetch(url)\n      let jres = await res.json()\n\n      let place = jres.results[0]\n\n      if(place!=null)\n      {\n        collection.update({_id:element._id}, {lat:place.geometry.location.lat, lng:place.geometry.location.lng, googlemaps_formatted_address:place.formatted_address, googlemaps_place_id:place.place_id});\n      }\n      else{\n        console.log(googlemaps_address)\n        console.log(jres)\n      }\n    } \n  }\n\n  // Respond with a JSON string of all stores in the collection\n  res.status(200).json({ stores })\n}"]},"metadata":{},"sourceType":"script"}