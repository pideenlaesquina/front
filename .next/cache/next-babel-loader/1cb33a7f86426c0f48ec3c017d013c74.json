{"ast":null,"code":"var _jsxFileName = \"/home/crmock/pideenlaequina/front/pages/index.js\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component, Fragment } from 'react';\nimport Map from '../components/map.js';\nimport Layout from '../components/layout.js';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"position\", async () => {\n      await navigator.geolocation.getCurrentPosition(position => this.setState({\n        pos: {\n          lat: position.coords.latitude,\n          lng: position.coords.longitude\n        }\n      }), err => async function () {\n        let ip = await fetch(process.env.IPIFY_URL).then(response => response.text());\n        let pos = await fetch(process.env.IPGEOLOCATION_API_URL + '/ipgeo?apiKey=' + process.env.IPGEOLOCATION_API_KEY + '&ip=' + ip).then(response => response.json());\n        this.setState({\n          pos: {\n            lat: parseFloat(pos.latitude),\n            lng: parseFloat(pos.longitude)\n          },\n          stores: null\n        });\n      });\n    });\n\n    this.state = {\n      pos: null,\n      stores: null\n    };\n  }\n\n  componentDidMount() {\n    this.position();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.state.pos != null && prevState.pos != this.state.pos) {\n      this.getStores(this.state.pos);\n    }\n  }\n\n  async getStores(pos) {\n    let url = '/api/stores?lat=' + pos.lat + '&lng=' + pos.lng;\n    let res = await fetch(url).then(response => response.json());\n    this.setState({\n      stores: res.stores\n    });\n  }\n\n  render() {\n    return __jsx(\"div\", {\n      style: {\n        height: '100vh'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 7\n      }\n    }, __jsx(Navbar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }\n    }), __jsx(Map, {\n      pos: this.state.pos,\n      stores: this.state.stores,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/crmock/pideenlaequina/front/pages/index.js"],"names":["React","Component","Fragment","Map","Layout","App","constructor","props","navigator","geolocation","getCurrentPosition","position","setState","pos","lat","coords","latitude","lng","longitude","err","ip","fetch","process","env","IPIFY_URL","then","response","text","IPGEOLOCATION_API_URL","IPGEOLOCATION_API_KEY","json","parseFloat","stores","state","componentDidMount","componentDidUpdate","prevProps","prevState","getStores","url","res","render","height"],"mappings":"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","sourcesContent":["import React, { Component, Fragment} from 'react'\nimport Map from '../components/map.js'\nimport Layout from '../components/layout.js'\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.state = { \n      pos:null,\n      stores:null\n    }\n  }\n\n  componentDidMount() {\n    this.position()\n  }\n\n  componentDidUpdate(prevProps, prevState)\n  {\n    if (this.state.pos != null && (prevState.pos != this.state.pos))\n    {\n      this.getStores(this.state.pos)\n    }\n  }\n\n  position = async () => {\n    await navigator.geolocation.getCurrentPosition(\n      position => this.setState({ pos:{\n        lat: position.coords.latitude, \n        lng: position.coords.longitude\n      }}), \n      err => async function()\n      {\n        let ip = await fetch(process.env.IPIFY_URL).then(response=>response.text())\n        let pos = await fetch(process.env.IPGEOLOCATION_API_URL +'/ipgeo?apiKey='+process.env.IPGEOLOCATION_API_KEY+'&ip='+ip).then(response=>response.json())\n    \n        this.setState({ pos:{lat:parseFloat(pos.latitude), lng:parseFloat(pos.longitude)}, stores:null})\n      }\n    )\n  }\n\n  async getStores(pos)\n  {\n    let url = '/api/stores?lat='+ pos.lat +'&lng='+pos.lng\n    let res = await fetch(url).then(response=>response.json())\n    \n    this.setState({ stores:res.stores })\n  }\n  \n  render() {\n    return (\n      <div style={{height:'100vh'}}>\n        <Navbar></Navbar>\n        <Map pos={this.state.pos} stores={this.state.stores}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}