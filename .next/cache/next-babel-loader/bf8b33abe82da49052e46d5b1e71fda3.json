{"ast":null,"code":"// Import Dependencies\nconst url = require('url');\n\nconst MongoClient = require('mongodb').MongoClient; // Create cached connection variable\n\n\nlet cachedDb = null; // A function for connecting to MongoDB,\n// taking a single parameter of the connection string\n\nasync function connectToDatabase(uri) {\n  // If the database connection is cached,\n  // use it instead of creating a new connection\n  if (cachedDb) {\n    return cachedDb;\n  } // If no connection is cached, create a new one\n\n\n  const client = await MongoClient.connect(uri, {\n    useNewUrlParser: true\n  }); // Select the database through the connection,\n  // using the database path of the connection string\n\n  const db = await client.db(url.parse(uri).pathname.substr(1)); // Cache the database connection and return the connection\n\n  cachedDb = db;\n  return db;\n} // The main, exported, function of the endpoint,\n// dealing with the request and subsequent response\n\n\nmodule.exports = async (req, res) => {\n  // Get a database connection, cached or otherwise,\n  // using the connection string environment variable as the argument\n  const db = await connectToDatabase(process.env.MONGODB_URI); // Select the \"stores\" collection from the database\n\n  const collection = await db.collection('stores'); // Select the stores collection from the database\n\n  const stores = await collection.find({}).toArray(); // Respond with a JSON string of all stores in the collection\n\n  res.status(200).json({\n    stores\n  });\n};","map":{"version":3,"sources":["/home/crmock/pideenlaequina/front/pages/api/stores.js"],"names":["url","require","MongoClient","cachedDb","connectToDatabase","uri","client","connect","useNewUrlParser","db","parse","pathname","substr","module","exports","req","res","process","env","MONGODB_URI","collection","stores","find","toArray","status","json"],"mappings":"AAAA;AACA,MAAMA,GAAG,GAAGC,OAAO,CAAC,KAAD,CAAnB;;AACA,MAAMC,WAAW,GAAGD,OAAO,CAAC,SAAD,CAAP,CAAmBC,WAAvC,C,CAEA;;;AACA,IAAIC,QAAQ,GAAG,IAAf,C,CAEA;AACA;;AACA,eAAeC,iBAAf,CAAiCC,GAAjC,EAAsC;AACpC;AACA;AACA,MAAIF,QAAJ,EAAc;AACZ,WAAOA,QAAP;AACD,GALmC,CAOpC;;;AACA,QAAMG,MAAM,GAAG,MAAMJ,WAAW,CAACK,OAAZ,CAAoBF,GAApB,EAAyB;AAAEG,IAAAA,eAAe,EAAE;AAAnB,GAAzB,CAArB,CARoC,CAUpC;AACA;;AACA,QAAMC,EAAE,GAAG,MAAMH,MAAM,CAACG,EAAP,CAAUT,GAAG,CAACU,KAAJ,CAAUL,GAAV,EAAeM,QAAf,CAAwBC,MAAxB,CAA+B,CAA/B,CAAV,CAAjB,CAZoC,CAcpC;;AACAT,EAAAA,QAAQ,GAAGM,EAAX;AACA,SAAOA,EAAP;AACD,C,CAED;AACA;;;AACAI,MAAM,CAACC,OAAP,GAAiB,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AACnC;AACA;AACA,QAAMP,EAAE,GAAG,MAAML,iBAAiB,CAACa,OAAO,CAACC,GAAR,CAAYC,WAAb,CAAlC,CAHmC,CAKnC;;AACA,QAAMC,UAAU,GAAG,MAAMX,EAAE,CAACW,UAAH,CAAc,QAAd,CAAzB,CANmC,CAQnC;;AACA,QAAMC,MAAM,GAAG,MAAMD,UAAU,CAACE,IAAX,CAAgB,EAAhB,EAAoBC,OAApB,EAArB,CATmC,CAWnC;;AACAP,EAAAA,GAAG,CAACQ,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEJ,IAAAA;AAAF,GAArB;AACD,CAbD","sourcesContent":["// Import Dependencies\nconst url = require('url')\nconst MongoClient = require('mongodb').MongoClient\n\n// Create cached connection variable\nlet cachedDb = null\n\n// A function for connecting to MongoDB,\n// taking a single parameter of the connection string\nasync function connectToDatabase(uri) {\n  // If the database connection is cached,\n  // use it instead of creating a new connection\n  if (cachedDb) {\n    return cachedDb\n  }\n\n  // If no connection is cached, create a new one\n  const client = await MongoClient.connect(uri, { useNewUrlParser: true })\n\n  // Select the database through the connection,\n  // using the database path of the connection string\n  const db = await client.db(url.parse(uri).pathname.substr(1))\n\n  // Cache the database connection and return the connection\n  cachedDb = db\n  return db\n}\n\n// The main, exported, function of the endpoint,\n// dealing with the request and subsequent response\nmodule.exports = async (req, res) => {\n  // Get a database connection, cached or otherwise,\n  // using the connection string environment variable as the argument\n  const db = await connectToDatabase(process.env.MONGODB_URI)\n\n  // Select the \"stores\" collection from the database\n  const collection = await db.collection('stores')\n\n  // Select the stores collection from the database\n  const stores = await collection.find({}).toArray()\n\n  // Respond with a JSON string of all stores in the collection\n  res.status(200).json({ stores })\n}"]},"metadata":{},"sourceType":"script"}