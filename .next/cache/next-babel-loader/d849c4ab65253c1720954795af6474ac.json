{"ast":null,"code":"\"use strict\";\n\nvar _isomorphicUnfetch = _interopRequireDefault(require(\"isomorphic-unfetch\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nmodule.exports = async (req, res) => {\n  if (req.query.id != null) {\n    let query_id = req.query.id;\n    let url = process.env.GOOGLE_MAPS_API_URL + \"/place/details/json?place_id=\" + query_id + \"&fields=formatted_address,geometry&key=\" + process.env.GOOGLE_MAPS_API_KEY;\n    let ress = await (0, _isomorphicUnfetch.default)(url);\n    let jres = await ress.json();\n    let predictions = jres.predictions;\n    res.status(200).json({\n      predictions\n    });\n  } else {\n    res.status(400).json({\n      error: \"missing parameters\"\n    });\n  }\n};","map":{"version":3,"sources":["/home/crmock/pideenlaequina/front/pages/api/addressPlace.js"],"names":["module","exports","req","res","query","id","query_id","url","process","env","GOOGLE_MAPS_API_URL","GOOGLE_MAPS_API_KEY","ress","jres","json","predictions","status","error"],"mappings":";;AAAA;;;;AAEAA,MAAM,CAACC,OAAP,GAAiB,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AACnC,MAAID,GAAG,CAACE,KAAJ,CAAUC,EAAV,IAAgB,IAApB,EAA0B;AACxB,QAAIC,QAAQ,GAAGJ,GAAG,CAACE,KAAJ,CAAUC,EAAzB;AAEA,QAAIE,GAAG,GAAGC,OAAO,CAACC,GAAR,CAAYC,mBAAZ,GAAkC,+BAAlC,GAAkEJ,QAAlE,GAA2E,yCAA3E,GAAqHE,OAAO,CAACC,GAAR,CAAYE,mBAA3I;AAEA,QAAIC,IAAI,GAAE,MAAM,gCAAML,GAAN,CAAhB;AACA,QAAIM,IAAI,GAAG,MAAMD,IAAI,CAACE,IAAL,EAAjB;AAEA,QAAIC,WAAW,GAAGF,IAAI,CAACE,WAAvB;AAEAZ,IAAAA,GAAG,CAACa,MAAJ,CAAW,GAAX,EAAgBF,IAAhB,CAAqB;AAAEC,MAAAA;AAAF,KAArB;AACD,GAXD,MAYK;AACHZ,IAAAA,GAAG,CAACa,MAAJ,CAAW,GAAX,EAAgBF,IAAhB,CAAqB;AAAEG,MAAAA,KAAK,EAAE;AAAT,KAArB;AACD;AACF,CAhBD","sourcesContent":["import fetch from 'isomorphic-unfetch'\n\nmodule.exports = async (req, res) => {\n  if (req.query.id != null) {\n    let query_id = req.query.id\n    \n    let url = process.env.GOOGLE_MAPS_API_URL + \"/place/details/json?place_id=\"+query_id+\"&fields=formatted_address,geometry&key=\"+process.env.GOOGLE_MAPS_API_KEY\n    \n    let ress= await fetch(url)\n    let jres = await ress.json()\n\n    let predictions = jres.predictions\n\n    res.status(200).json({ predictions })\n  }\n  else {\n    res.status(400).json({ error: \"missing parameters\" })\n  }\n}"]},"metadata":{},"sourceType":"script"}