{"ast":null,"code":"\"use strict\";\n\nvar _mongodb = _interopRequireDefault(require(\"../../middleware/mongodb.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// The main, exported, function of the endpoint,\n// dealing with the request and subsequent response\nmodule.exports = async (req, res) => {\n  // Get a database connection, cached or otherwise,\n  // using the connection string environment variable as the argument\n  let querry_lat = parseFloat(req.query.lat);\n  let querry_lng = parseFloat(req.query.lng);\n  console.log(querry_lat - 0.005);\n  console.log(querry_lat);\n  console.log(querry_lat + 0.005);\n  console.log(querry_lng - 0.005);\n  console.log(querry_lng);\n  console.log(querry_lng + 0.005);\n  const db = await (0, _mongodb.default)(); // Select the \"stores\" collection from the database\n\n  const collection = await db.collection('stores'); // Select the stores collection from the database\n\n  const stores = await collection.find({\n    lat: {\n      $gt: querry_lat - 0.005,\n      $lt: querry_lat + 0.005\n    },\n    lng: {\n      $gt: querry_lng - 0.005,\n      $lt: querry_lng + 0.005\n    }\n  }).toArray(); // Respond with a JSON string of all stores in the collection\n\n  res.status(200).json({\n    stores\n  });\n};","map":{"version":3,"sources":["/home/crmock/pideenlaequina/front/pages/api/stores.js"],"names":["module","exports","req","res","querry_lat","parseFloat","query","lat","querry_lng","lng","console","log","db","collection","stores","find","$gt","$lt","toArray","status","json"],"mappings":";;AAAA;;;;AAEA;AACA;AACAA,MAAM,CAACC,OAAP,GAAiB,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AACnC;AACA;AACA,MAAIC,UAAU,GAAGC,UAAU,CAACH,GAAG,CAACI,KAAJ,CAAUC,GAAX,CAA3B;AACA,MAAIC,UAAU,GAAGH,UAAU,CAACH,GAAG,CAACI,KAAJ,CAAUG,GAAX,CAA3B;AAEAC,EAAAA,OAAO,CAACC,GAAR,CAAYP,UAAU,GAAC,KAAvB;AACAM,EAAAA,OAAO,CAACC,GAAR,CAAYP,UAAZ;AACAM,EAAAA,OAAO,CAACC,GAAR,CAAYP,UAAU,GAAC,KAAvB;AACAM,EAAAA,OAAO,CAACC,GAAR,CAAYH,UAAU,GAAC,KAAvB;AACAE,EAAAA,OAAO,CAACC,GAAR,CAAYH,UAAZ;AACAE,EAAAA,OAAO,CAACC,GAAR,CAAYH,UAAU,GAAC,KAAvB;AAEA,QAAMI,EAAE,GAAG,MAAM,uBAAjB,CAbmC,CAenC;;AACA,QAAMC,UAAU,GAAG,MAAMD,EAAE,CAACC,UAAH,CAAc,QAAd,CAAzB,CAhBmC,CAkBnC;;AACA,QAAMC,MAAM,GAAG,MAAMD,UAAU,CAACE,IAAX,CAAgB;AAAER,IAAAA,GAAG,EAAC;AAAES,MAAAA,GAAG,EAACZ,UAAU,GAAC,KAAjB;AAAwBa,MAAAA,GAAG,EAACb,UAAU,GAAC;AAAvC,KAAN;AAAsDK,IAAAA,GAAG,EAAC;AAAEO,MAAAA,GAAG,EAACR,UAAU,GAAC,KAAjB;AAAwBS,MAAAA,GAAG,EAACT,UAAU,GAAC;AAAvC;AAA1D,GAAhB,EAA4HU,OAA5H,EAArB,CAnBmC,CAqBnC;;AACAf,EAAAA,GAAG,CAACgB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEN,IAAAA;AAAF,GAArB;AACD,CAvBD","sourcesContent":["import Database from '../../middleware/mongodb.js'\n\n// The main, exported, function of the endpoint,\n// dealing with the request and subsequent response\nmodule.exports = async (req, res) => {\n  // Get a database connection, cached or otherwise,\n  // using the connection string environment variable as the argument\n  let querry_lat = parseFloat(req.query.lat)\n  let querry_lng = parseFloat(req.query.lng)\n\n  console.log(querry_lat-0.005)\n  console.log(querry_lat)\n  console.log(querry_lat+0.005)\n  console.log(querry_lng-0.005)\n  console.log(querry_lng)\n  console.log(querry_lng+0.005)\n  \n  const db = await Database()\n\n  // Select the \"stores\" collection from the database\n  const collection = await db.collection('stores')\n\n  // Select the stores collection from the database\n  const stores = await collection.find({ lat:{ $gt:querry_lat-0.005, $lt:querry_lat+0.005 }, lng:{ $gt:querry_lng-0.005, $lt:querry_lng+0.005 } }).toArray()\n\n  // Respond with a JSON string of all stores in the collection\n  res.status(200).json({ stores })\n}"]},"metadata":{},"sourceType":"script"}