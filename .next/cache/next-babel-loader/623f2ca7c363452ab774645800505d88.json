{"ast":null,"code":"var _jsxFileName = \"/home/crmock/pideenlaequina/front/components/LocationContext.js\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component, createContext, useContext } from 'react';\nimport AuthContext from './authContext.js';\nconst LocationContext = createContext(); // create a provider\n\nexport class LocationProvider extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"location\", async () => {\n      await navigator.geolocation.getCurrentPosition(position => this.setState({\n        location: {\n          lat: position.coords.latitude,\n          lng: position.coords.longitude\n        },\n        selectedLocation: {\n          lat: position.coords.latitude,\n          lng: position.coords.longitude\n        }\n      }), err => async function () {\n        let ip = await fetch(process.env.IPIFY_URL).then(response => response.text());\n        let pos = await fetch(process.env.IPGEOLOCATION_API_URL + '/ipgeo?apiKey=' + process.env.IPGEOLOCATION_API_KEY + '&ip=' + ip).then(response => response.json());\n        this.setState({\n          location: {\n            lat: parseFloat(pos.latitude),\n            lng: parseFloat(pos.longitude)\n          },\n          selectedLocation: {\n            lat: parseFloat(pos.latitude),\n            lng: parseFloat(pos.longitude)\n          },\n          isLoading: false\n        });\n      });\n    });\n\n    this.state = {\n      location: null,\n      selectedLocation: null,\n      featuredStores: null,\n      isReady: true\n    };\n  }\n\n  componentDidMount() {\n    this.location();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.state.selectedLocation != null && prevState.selectedLocation != this.state.selectedLocation) {\n      this.featuredStores(this.state.selectedLocation);\n    }\n\n    if (!this.state.isReady && this.state.selectedLocation != null) {\n      let now = new Date();\n      let towait = 2000 - now.getTime() - this.startedAt.getTime();\n\n      if (towait > 0) {\n        setTimeout(() => {\n          this.setState({\n            isReady: true\n          });\n        }, towait);\n      } else {\n        this.setState({\n          isReady: true\n        });\n      }\n    }\n  }\n\n  async featuredStores(location) {\n    let url = '/api/featuredStores?lat=' + location.lat + '&lng=' + location.lng;\n    let res = await fetch(url).then(response => response.json());\n    this.setState({\n      featuredStores: res.stores\n    });\n  }\n\n  render() {\n    return __jsx(LocationContext.Provider, {\n      value: this.state,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 7\n      }\n    }, this.props.children);\n  }\n\n}\nexport default LocationContext;","map":{"version":3,"sources":["/home/crmock/pideenlaequina/front/components/LocationContext.js"],"names":["React","Component","createContext","useContext","AuthContext","LocationContext","LocationProvider","constructor","props","navigator","geolocation","getCurrentPosition","position","setState","location","lat","coords","latitude","lng","longitude","selectedLocation","err","ip","fetch","process","env","IPIFY_URL","then","response","text","pos","IPGEOLOCATION_API_URL","IPGEOLOCATION_API_KEY","json","parseFloat","isLoading","state","featuredStores","isReady","componentDidMount","componentDidUpdate","prevProps","prevState","now","Date","towait","getTime","startedAt","setTimeout","url","res","stores","render","children"],"mappings":"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","sourcesContent":["import React, { Component, createContext, useContext } from 'react';\nimport AuthContext from './authContext.js';\n\nconst LocationContext = createContext();\n\n// create a provider\nexport class LocationProvider extends Component {\n   \n  constructor(props)\n  {\n    super(props)\n    this. state = {\n      location:null,\n      selectedLocation:null,\n      featuredStores:null,\n      isReady:true,\n    }\n  }\n\n  componentDidMount() {\n    this.location();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if(this.state.selectedLocation != null && (prevState.selectedLocation != this.state.selectedLocation))\n    {\n      this.featuredStores(this.state.selectedLocation)\n    }\n\n    if(!this.state.isReady && this.state.selectedLocation !=null)\n    {\n      let now = new Date()\n      let towait = 2000 - now.getTime() - this.startedAt.getTime()\n      \n      if(towait>0)\n      {\n        setTimeout(() => {\n          this.setState({ isReady:true })\n        }, towait)\n      }\n      else\n      {\n        this.setState({ isReady:true })\n      }\n    }\n  }\n  \n  location = async () => {\n    await navigator.geolocation.getCurrentPosition(\n      position => this.setState({ \n        location:{\n          lat: position.coords.latitude, \n          lng: position.coords.longitude\n        },\n        selectedLocation:{\n          lat: position.coords.latitude, \n          lng: position.coords.longitude\n        }\n      }), \n      err => async function()\n      {\n        let ip = await fetch(process.env.IPIFY_URL).then(response=>response.text())\n        let pos = await fetch(process.env.IPGEOLOCATION_API_URL +'/ipgeo?apiKey='+process.env.IPGEOLOCATION_API_KEY+'&ip='+ip).then(response=>response.json())\n    \n        this.setState({ \n          location:{lat:parseFloat(pos.latitude), lng:parseFloat(pos.longitude)}, \n          selectedLocation:{lat:parseFloat(pos.latitude), lng:parseFloat(pos.longitude)}, \n          isLoading:false\n        })\n      }\n    )\n  }\n\n  async featuredStores(location)\n  {\n    let url = '/api/featuredStores?lat='+ location.lat +'&lng='+location.lng\n    let res = await fetch(url).then(response=>response.json())\n    \n    this.setState({ featuredStores:res.stores })\n  }\n\n  render() {\n    return (\n      <LocationContext.Provider value={this.state}>\n        {this.props.children}\n      </LocationContext.Provider>\n    );\n  }\n}\n\nexport default LocationContext;"]},"metadata":{},"sourceType":"module"}