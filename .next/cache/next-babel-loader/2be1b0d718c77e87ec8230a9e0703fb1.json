{"ast":null,"code":"\"use strict\";\n\nvar _mongodb = _interopRequireDefault(require(\"../../middleware/mongodb.js\"));\n\nvar _isomorphicUnfetch = _interopRequireDefault(require(\"isomorphic-unfetch\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst fs = require('fs'); // The main, exported, function of the endpoint,\n// dealing with the request and subsequent response\n\n\nmodule.exports = async (req, res) => {\n  // Get a database connection, cached or otherwise,\n  // using the connection string environment variable as the argument\n  const db = await (0, _mongodb.default)();\n  let rawdata = fs.readFileSync('./../bavaria-fixed.json');\n  let stores = JSON.parse(rawdata); //console.log(stores)\n\n  for (let index = 0; index < stores.length; index++) {\n    const element = stores[index];\n    console.log(element);\n    console.log(\"---\");\n    let url = \"https://maps.googleapis.com/maps/api/geocode/json?latlng=\" + element.lat + \",\" + element.lng + \"&key=\" + process.env.GOOGLE_MAPS_API_KEY; //     const element = stores[index]\n    //     const googlemaps_address = element.googlemaps_address;\n    //     if(googlemaps_address!=null && googlemaps_address!=\"\")\n    //     {\n    //       let url = process.env.GOOGLE_MAPS_API_URL + \"?address=\"+googlemaps_address+\"&key=\"+process.env.GOOGLE_MAPS_API_KEY\n    //       let res = await fetch(url)\n    //       let jres = await res.json()\n    //       let place = jres.results[0]\n    //       if(place!=null)\n    //       {\n    //         collection.update({_id:element._id}, {$set:{lat:place.geometry.location.lat, lng:place.geometry.location.lng, googlemaps_formatted_address:place.formatted_address, googlemaps_place_id:place.place_id}});\n    //         counter++\n    //       }\n    //       else{\n    //         console.log(googlemaps_address)\n    //         console.log(jres)\n    //       }\n    //     } \n  } // Respond with a JSON string of all stores in the collection\n\n\n  res.status(200).json(\":)\");\n};","map":{"version":3,"sources":["/home/crmock/pideenlaequina/front/pages/api/upload.js"],"names":["fs","require","module","exports","req","res","db","rawdata","readFileSync","stores","JSON","parse","index","length","element","console","log","url","lat","lng","process","env","GOOGLE_MAPS_API_KEY","status","json"],"mappings":";;AAAA;;AACA;;;;AAEA,MAAMA,EAAE,GAAGC,OAAO,CAAC,IAAD,CAAlB,C,CAEA;AACA;;;AACAC,MAAM,CAACC,OAAP,GAAiB,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AACnC;AACA;AACA,QAAMC,EAAE,GAAG,MAAM,uBAAjB;AAEA,MAAIC,OAAO,GAAGP,EAAE,CAACQ,YAAH,CAAgB,yBAAhB,CAAd;AACA,MAAIC,MAAM,GAAGC,IAAI,CAACC,KAAL,CAAWJ,OAAX,CAAb,CANmC,CAOnC;;AACA,OAAK,IAAIK,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGH,MAAM,CAACI,MAAnC,EAA2CD,KAAK,EAAhD,EAAoD;AAClD,UAAME,OAAO,GAAGL,MAAM,CAACG,KAAD,CAAtB;AACAG,IAAAA,OAAO,CAACC,GAAR,CAAYF,OAAZ;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ;AACA,QAAIC,GAAG,GAAG,8DAA4DH,OAAO,CAACI,GAApE,GAAwE,GAAxE,GAA4EJ,OAAO,CAACK,GAApF,GAAwF,OAAxF,GAAgGC,OAAO,CAACC,GAAR,CAAYC,mBAAtH,CAJkD,CAKtD;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACG,GAnCkC,CAqCnC;;;AACAjB,EAAAA,GAAG,CAACkB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,IAArB;AACD,CAvCD","sourcesContent":["import Database from '../../middleware/mongodb.js'\nimport fetch from 'isomorphic-unfetch'\n\nconst fs = require('fs');\n\n// The main, exported, function of the endpoint,\n// dealing with the request and subsequent response\nmodule.exports = async (req, res) => {\n  // Get a database connection, cached or otherwise,\n  // using the connection string environment variable as the argument\n  const db = await Database()\n\n  let rawdata = fs.readFileSync('./../bavaria-fixed.json');\n  let stores = JSON.parse(rawdata);\n  //console.log(stores)\n  for (let index = 0; index < stores.length; index++) {\n    const element = stores[index]  \n    console.log(element)\n    console.log(\"---\")\n    let url = \"https://maps.googleapis.com/maps/api/geocode/json?latlng=\"+element.lat+\",\"+element.lng+\"&key=\"+process.env.GOOGLE_MAPS_API_KEY\n//     const element = stores[index]\n//     const googlemaps_address = element.googlemaps_address;\n\n//     if(googlemaps_address!=null && googlemaps_address!=\"\")\n//     {\n      \n//       let url = process.env.GOOGLE_MAPS_API_URL + \"?address=\"+googlemaps_address+\"&key=\"+process.env.GOOGLE_MAPS_API_KEY\n//       let res = await fetch(url)\n//       let jres = await res.json()\n\n//       let place = jres.results[0]\n\n//       if(place!=null)\n//       {\n//         collection.update({_id:element._id}, {$set:{lat:place.geometry.location.lat, lng:place.geometry.location.lng, googlemaps_formatted_address:place.formatted_address, googlemaps_place_id:place.place_id}});\n//         counter++\n//       }\n//       else{\n//         console.log(googlemaps_address)\n//         console.log(jres)\n//       }\n//     } \n  }\n\n  // Respond with a JSON string of all stores in the collection\n  res.status(200).json(\":)\")\n}"]},"metadata":{},"sourceType":"script"}