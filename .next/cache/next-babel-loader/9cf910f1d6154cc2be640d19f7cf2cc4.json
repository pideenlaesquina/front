{"ast":null,"code":"\"use strict\";\n\nvar _mongodb = _interopRequireDefault(require(\"../../middleware/mongodb.js\"));\n\nvar _isomorphicUnfetch = _interopRequireDefault(require(\"isomorphic-unfetch\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst fs = require('fs'); // The main, exported, function of the endpoint,\n// dealing with the request and subsequent response\n\n\nmodule.exports = async (req, res) => {\n  // Get a database connection, cached or otherwise,\n  // using the connection string environment variable as the argument\n  const db = await (0, _mongodb.default)(); // Select the \"stores\" collection from the database\n\n  const collection = await db.collection('stores2');\n  let rawdata = fs.readFileSync('./../bavaria-fixed.json');\n  let stores = JSON.parse(rawdata);\n  let counter = 0;\n\n  for (let index = 0; index < stores.length; index++) {\n    const element = stores[index];\n    let url = \"https://maps.googleapis.com/maps/api/geocode/json?latlng=\" + element.lat + \",\" + element.lng + \"&key=\" + process.env.GOOGLE_MAPS_API_KEY;\n    let res = await (0, _isomorphicUnfetch.default)(url);\n    let jres = await res.json();\n    let place = jres.results[0];\n    collection.insert({\n      lat: element.lat,\n      lng: element.lng,\n      googlemaps_lat: place.geometry.location.lat,\n      googlemaps_lng: place.geometry.location.lng,\n      googlemaps_formatted_address: place.formatted_address,\n      googlemaps_place_id: place.place_id,\n      googlemaps_compound_code: place.plus_code.compound_code,\n      name: element.name,\n      country_code: \"CO\",\n      cellphone: element.cellphone.length == 10 ? element.cellphone : \"\",\n      telephone: element.cellphone.length != 10 ? element.cellphone : \"\",\n      address: element.address\n    });\n    counter++;\n  } // Respond with a JSON string of all stores in the collection\n\n\n  res.status(200).json({\n    uploaded_entities: counter\n  });\n};","map":{"version":3,"sources":["/home/crmock/pideenlaequina/front/pages/api/upload.js"],"names":["fs","require","module","exports","req","res","db","collection","rawdata","readFileSync","stores","JSON","parse","counter","index","length","element","url","lat","lng","process","env","GOOGLE_MAPS_API_KEY","jres","json","place","results","insert","googlemaps_lat","geometry","location","googlemaps_lng","googlemaps_formatted_address","formatted_address","googlemaps_place_id","place_id","googlemaps_compound_code","plus_code","compound_code","name","country_code","cellphone","telephone","address","status","uploaded_entities"],"mappings":";;AAAA;;AACA;;;;AAEA,MAAMA,EAAE,GAAGC,OAAO,CAAC,IAAD,CAAlB,C,CAEA;AACA;;;AACAC,MAAM,CAACC,OAAP,GAAiB,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AACnC;AACA;AACA,QAAMC,EAAE,GAAG,MAAM,uBAAjB,CAHmC,CAKnC;;AACA,QAAMC,UAAU,GAAG,MAAMD,EAAE,CAACC,UAAH,CAAc,SAAd,CAAzB;AAEA,MAAIC,OAAO,GAAGR,EAAE,CAACS,YAAH,CAAgB,yBAAhB,CAAd;AACA,MAAIC,MAAM,GAAGC,IAAI,CAACC,KAAL,CAAWJ,OAAX,CAAb;AAEA,MAAIK,OAAO,GAAG,CAAd;;AACA,OAAK,IAAIC,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGJ,MAAM,CAACK,MAAnC,EAA2CD,KAAK,EAAhD,EAAoD;AAClD,UAAME,OAAO,GAAGN,MAAM,CAACI,KAAD,CAAtB;AAEA,QAAIG,GAAG,GAAG,8DAA4DD,OAAO,CAACE,GAApE,GAAwE,GAAxE,GAA4EF,OAAO,CAACG,GAApF,GAAwF,OAAxF,GAAgGC,OAAO,CAACC,GAAR,CAAYC,mBAAtH;AAEA,QAAIjB,GAAG,GAAG,MAAM,gCAAMY,GAAN,CAAhB;AACA,QAAIM,IAAI,GAAG,MAAMlB,GAAG,CAACmB,IAAJ,EAAjB;AAEA,QAAIC,KAAK,GAAGF,IAAI,CAACG,OAAL,CAAa,CAAb,CAAZ;AAEAnB,IAAAA,UAAU,CAACoB,MAAX,CAAkB;AACdT,MAAAA,GAAG,EAACF,OAAO,CAACE,GADE;AAEdC,MAAAA,GAAG,EAACH,OAAO,CAACG,GAFE;AAGdS,MAAAA,cAAc,EAACH,KAAK,CAACI,QAAN,CAAeC,QAAf,CAAwBZ,GAHzB;AAIda,MAAAA,cAAc,EAACN,KAAK,CAACI,QAAN,CAAeC,QAAf,CAAwBX,GAJzB;AAKda,MAAAA,4BAA4B,EAACP,KAAK,CAACQ,iBALrB;AAMdC,MAAAA,mBAAmB,EAACT,KAAK,CAACU,QANZ;AAOdC,MAAAA,wBAAwB,EAACX,KAAK,CAACY,SAAN,CAAgBC,aAP3B;AAQdC,MAAAA,IAAI,EAACvB,OAAO,CAACuB,IARC;AASdC,MAAAA,YAAY,EAAC,IATC;AAUdC,MAAAA,SAAS,EAAEzB,OAAO,CAACyB,SAAR,CAAkB1B,MAAlB,IAA0B,EAA1B,GAA6BC,OAAO,CAACyB,SAArC,GAA+C,EAV5C;AAWdC,MAAAA,SAAS,EAAE1B,OAAO,CAACyB,SAAR,CAAkB1B,MAAlB,IAA0B,EAA1B,GAA6BC,OAAO,CAACyB,SAArC,GAA+C,EAX5C;AAYdE,MAAAA,OAAO,EAAC3B,OAAO,CAAC2B;AAZF,KAAlB;AAcA9B,IAAAA,OAAO;AACR,GArCkC,CAuCnC;;;AACAR,EAAAA,GAAG,CAACuC,MAAJ,CAAW,GAAX,EAAgBpB,IAAhB,CAAqB;AAACqB,IAAAA,iBAAiB,EAAChC;AAAnB,GAArB;AACD,CAzCD","sourcesContent":["import Database from '../../middleware/mongodb.js'\nimport fetch from 'isomorphic-unfetch'\n\nconst fs = require('fs');\n\n// The main, exported, function of the endpoint,\n// dealing with the request and subsequent response\nmodule.exports = async (req, res) => {\n  // Get a database connection, cached or otherwise,\n  // using the connection string environment variable as the argument\n  const db = await Database()\n\n  // Select the \"stores\" collection from the database\n  const collection = await db.collection('stores2')\n\n  let rawdata = fs.readFileSync('./../bavaria-fixed.json');\n  let stores = JSON.parse(rawdata);\n\n  let counter = 0\n  for (let index = 0; index < stores.length; index++) {\n    const element = stores[index]  \n\n    let url = \"https://maps.googleapis.com/maps/api/geocode/json?latlng=\"+element.lat+\",\"+element.lng+\"&key=\"+process.env.GOOGLE_MAPS_API_KEY\n\n    let res = await fetch(url)\n    let jres = await res.json()\n\n    let place = jres.results[0]\n\n    collection.insert({\n        lat:element.lat, \n        lng:element.lng, \n        googlemaps_lat:place.geometry.location.lat, \n        googlemaps_lng:place.geometry.location.lng, \n        googlemaps_formatted_address:place.formatted_address, \n        googlemaps_place_id:place.place_id,\n        googlemaps_compound_code:place.plus_code.compound_code,\n        name:element.name,\n        country_code:\"CO\",\n        cellphone:(element.cellphone.length==10?element.cellphone:\"\"),\n        telephone:(element.cellphone.length!=10?element.cellphone:\"\"),\n        address:element.address\n    });\n    counter++\n  }\n\n  // Respond with a JSON string of all stores in the collection\n  res.status(200).json({uploaded_entities:counter})\n}"]},"metadata":{},"sourceType":"script"}