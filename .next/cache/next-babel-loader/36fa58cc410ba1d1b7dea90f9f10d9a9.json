{"ast":null,"code":"\"use strict\";\n\nvar _isomorphicUnfetch = _interopRequireDefault(require(\"isomorphic-unfetch\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nmodule.exports = async (req, res) => {\n  if (req.query.ip != null) {\n    let req_ip = parseFloat(req.query.ip);\n    console.log(req.headers);\n    let ip = await (0, _isomorphicUnfetch.default)(process.env.IPIFY_URL).then(response => response.text());\n    let pos = await (0, _isomorphicUnfetch.default)(process.env.IPGEOLOCATION_API_URL + '/ipgeo?apiKey=' + process.env.IPGEOLOCATION_API_KEY + '&ip=' + ip).then(response => response.json());\n    let loc = {\n      lat: parseFloat(pos.latitude),\n      lng: parseFloat(pos.longitude)\n    };\n    res.status(200).json({\n      loc\n    });\n  } else {\n    res.status(400).json({\n      error: \"missing parameters\"\n    });\n  }\n};","map":{"version":3,"sources":["/home/crmock/pideenlaequina/front/pages/api/locationFromIp.js"],"names":["module","exports","req","res","query","ip","req_ip","parseFloat","console","log","headers","process","env","IPIFY_URL","then","response","text","pos","IPGEOLOCATION_API_URL","IPGEOLOCATION_API_KEY","json","loc","lat","latitude","lng","longitude","status","error"],"mappings":";;AAAA;;;;AAEAA,MAAM,CAACC,OAAP,GAAiB,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AACnC,MAAID,GAAG,CAACE,KAAJ,CAAUC,EAAV,IAAgB,IAApB,EAA0B;AACxB,QAAIC,MAAM,GAAGC,UAAU,CAACL,GAAG,CAACE,KAAJ,CAAUC,EAAX,CAAvB;AAEAG,IAAAA,OAAO,CAACC,GAAR,CAAYP,GAAG,CAACQ,OAAhB;AACA,QAAIL,EAAE,GAAG,MAAM,gCAAMM,OAAO,CAACC,GAAR,CAAYC,SAAlB,EAA6BC,IAA7B,CAAkCC,QAAQ,IAAEA,QAAQ,CAACC,IAAT,EAA5C,CAAf;AACA,QAAIC,GAAG,GAAG,MAAM,gCAAMN,OAAO,CAACC,GAAR,CAAYM,qBAAZ,GAAmC,gBAAnC,GAAoDP,OAAO,CAACC,GAAR,CAAYO,qBAAhE,GAAsF,MAAtF,GAA6Fd,EAAnG,EAAuGS,IAAvG,CAA4GC,QAAQ,IAAEA,QAAQ,CAACK,IAAT,EAAtH,CAAhB;AACA,QAAIC,GAAG,GAAG;AACNC,MAAAA,GAAG,EAACf,UAAU,CAACU,GAAG,CAACM,QAAL,CADR;AAENC,MAAAA,GAAG,EAACjB,UAAU,CAACU,GAAG,CAACQ,SAAL;AAFR,KAAV;AAKAtB,IAAAA,GAAG,CAACuB,MAAJ,CAAW,GAAX,EAAgBN,IAAhB,CAAqB;AAAEC,MAAAA;AAAF,KAArB;AACD,GAZD,MAaK;AACHlB,IAAAA,GAAG,CAACuB,MAAJ,CAAW,GAAX,EAAgBN,IAAhB,CAAqB;AAAEO,MAAAA,KAAK,EAAE;AAAT,KAArB;AACD;AACF,CAjBD","sourcesContent":["import fetch from 'isomorphic-unfetch'\n\nmodule.exports = async (req, res) => {\n  if (req.query.ip != null) {\n    let req_ip = parseFloat(req.query.ip)\n\n    console.log(req.headers)\n    let ip = await fetch(process.env.IPIFY_URL).then(response=>response.text())\n    let pos = await fetch(process.env.IPGEOLOCATION_API_URL +'/ipgeo?apiKey='+process.env.IPGEOLOCATION_API_KEY+'&ip='+ip).then(response=>response.json())\n    let loc = {\n        lat:parseFloat(pos.latitude),\n        lng:parseFloat(pos.longitude)\n    }\n    \n    res.status(200).json({ loc })\n  }\n  else {\n    res.status(400).json({ error: \"missing parameters\" })\n  }\n}"]},"metadata":{},"sourceType":"script"}