{"ast":null,"code":"var _jsxFileName = \"/home/crmock/pideenlaequina/front/components/locationContext.js\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component, createContext } from 'react';\nconst context = createContext(); // create a provider\n\nclass LocationContextProvider extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"initialLocation\", async () => {\n      await navigator.geolocation.getCurrentPosition(position => this.setState({\n        location: {\n          lat: position.coords.latitude,\n          lng: position.coords.longitude\n        },\n        selectedLocation: {\n          lat: position.coords.latitude,\n          lng: position.coords.longitude\n        }\n      }), err => async function () {\n        let ip = await fetch(process.env.IPIFY_URL).then(response => response.text());\n        let pos = await fetch(process.env.IPGEOLOCATION_API_URL + '/ipgeo?apiKey=' + process.env.IPGEOLOCATION_API_KEY + '&ip=' + ip).then(response => response.json());\n        this.setState({\n          location: {\n            lat: parseFloat(pos.latitude),\n            lng: parseFloat(pos.longitude)\n          },\n          selectedLocation: {\n            lat: parseFloat(pos.latitude),\n            lng: parseFloat(pos.longitude)\n          }\n        });\n      });\n    });\n\n    this.state = {\n      location: null,\n      selectedLocation: null,\n      featuredStores: null,\n      stores: null,\n      isReady: false,\n      isLoading: true\n    };\n    this.startedAt = new Date();\n  }\n\n  componentDidMount() {\n    this.location();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.state.selectedLocation != null && prevState.selectedLocation != this.state.selectedLocation) {\n      this.featuredStores(this.state.selectedLocation);\n      this.stores(this.state.selectedLocation);\n    }\n\n    if (!this.state.isReady && this.state.selectedLocation != null) {\n      let now = new Date();\n      let towait = 2000 - now.getTime() - this.startedAt.getTime();\n\n      if (towait > 0) {\n        setTimeout(() => {\n          this.setState({\n            isReady: true\n          });\n        }, towait);\n      } else {\n        this.setState({\n          isReady: true\n        });\n      }\n    }\n\n    if (this.state.isLoading && this.state.stores != null && this.state.featuredStores != null) {\n      this.setState({\n        isLoading: false\n      });\n    }\n  }\n\n  updateLocation(newLat, newLng) {\n    this.setState({\n      location: {\n        lat: parseFloat(newLat),\n        lng: parseFloat(newLng)\n      },\n      isLoading: true\n    });\n  }\n\n  async featuredStores(location) {\n    let url = '/api/featuredStores?lat=' + location.lat + '&lng=' + location.lng;\n    let res = await fetch(url).then(response => response.json());\n    this.setState({\n      featuredStores: res.stores\n    });\n  }\n\n  async stores(location) {\n    let url = '/api/stores?lat=' + location.lat + '&lng=' + location.lng;\n    let res = await fetch(url).then(response => response.json());\n    this.setState({\n      stores: res.stores\n    });\n  }\n\n  render() {\n    return __jsx(Provider, {\n      value: this.state,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 13\n      }\n    }, this.props.children);\n  }\n\n}\n\nexport default context;","map":{"version":3,"sources":["/home/crmock/pideenlaequina/front/components/locationContext.js"],"names":["React","Component","createContext","context","LocationContextProvider","constructor","props","navigator","geolocation","getCurrentPosition","position","setState","location","lat","coords","latitude","lng","longitude","selectedLocation","err","ip","fetch","process","env","IPIFY_URL","then","response","text","pos","IPGEOLOCATION_API_URL","IPGEOLOCATION_API_KEY","json","parseFloat","state","featuredStores","stores","isReady","isLoading","startedAt","Date","componentDidMount","componentDidUpdate","prevProps","prevState","now","towait","getTime","setTimeout","updateLocation","newLat","newLng","url","res","render","children"],"mappings":"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","sourcesContent":["import React, { Component, createContext } from 'react';\n\nconst context= createContext()\n\n// create a provider\nclass LocationContextProvider extends Component {\n   \n  constructor(props)\n  {\n    super(props)\n    this. state = {\n      location:null,\n      selectedLocation:null,\n      featuredStores:null,\n      stores:null,\n      isReady:false,\n      isLoading:true\n    }\n    this.startedAt = new Date()\n  }\n\n  componentDidMount() {\n    this.location();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if(this.state.selectedLocation != null && (prevState.selectedLocation != this.state.selectedLocation))\n    {\n      this.featuredStores(this.state.selectedLocation)\n      this.stores(this.state.selectedLocation)\n    }\n\n    if(\n        !this.state.isReady \n        && this.state.selectedLocation !=null)\n    {\n      let now = new Date()\n      let towait = 2000 - now.getTime() - this.startedAt.getTime()\n      \n      if(towait>0)\n      {\n        setTimeout(() => {\n          this.setState({ isReady:true })\n        }, towait)\n      }\n      else\n      {\n        this.setState({ isReady:true })\n      }\n    }\n\n    if(this.state.isLoading \n      && this.state.stores != null \n      && this.state.featuredStores != null)\n    {\n      this.setState({ isLoading:false })\n    }\n  }\n  \n  initialLocation = async () => {\n    await navigator.geolocation.getCurrentPosition(\n      position => this.setState({ \n        location:{\n          lat: position.coords.latitude, \n          lng: position.coords.longitude\n        },\n        selectedLocation:{\n          lat: position.coords.latitude, \n          lng: position.coords.longitude\n        }\n      }), \n      err => async function()\n      {\n        let ip = await fetch(process.env.IPIFY_URL).then(response=>response.text())\n        let pos = await fetch(process.env.IPGEOLOCATION_API_URL +'/ipgeo?apiKey='+process.env.IPGEOLOCATION_API_KEY+'&ip='+ip).then(response=>response.json())\n    \n        this.setState({ \n          location:{lat:parseFloat(pos.latitude), lng:parseFloat(pos.longitude)}, \n          selectedLocation:{lat:parseFloat(pos.latitude), lng:parseFloat(pos.longitude)}\n        })\n      }\n    )\n  }\n\n  updateLocation(newLat, newLng)\n  {\n    this.setState({ \n      location:{lat:parseFloat(newLat), lng:parseFloat(newLng)},\n      isLoading: true \n    })\n  }\n\n  async featuredStores(location)\n  {\n    let url = '/api/featuredStores?lat='+ location.lat +'&lng='+location.lng\n    let res = await fetch(url).then(response=>response.json())\n    \n    this.setState({ featuredStores:res.stores })\n  }\n\n  async stores(location)\n  {\n    let url = '/api/stores?lat='+ location.lat +'&lng='+location.lng\n    let res = await fetch(url).then(response=>response.json())\n    \n    this.setState({ stores:res.stores })\n  }\n\n  render() {\n    return (<Provider value={this.state}>{this.props.children}</Provider>);\n  }\n}\n\nexport default context;"]},"metadata":{},"sourceType":"module"}