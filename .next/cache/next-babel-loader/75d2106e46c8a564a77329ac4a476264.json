{"ast":null,"code":"var _jsxFileName = \"/home/crmock/pideenlaequina/front/components/userContext.js\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component, createContext, useContext } from 'react';\nconst UserContext = createContext(); // create a provider\n\nexport class UserProvider extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"location\", async () => {\n      await navigator.geolocation.getCurrentPosition(position => this.setState({\n        location: {\n          lat: position.coords.latitude,\n          lng: position.coords.longitude\n        }\n      }), err => async function () {\n        let ip = await fetch(process.env.IPIFY_URL).then(response => response.text());\n        let pos = await fetch(process.env.IPGEOLOCATION_API_URL + '/ipgeo?apiKey=' + process.env.IPGEOLOCATION_API_KEY + '&ip=' + ip).then(response => response.json());\n        this.setState({\n          location: {\n            lat: parseFloat(pos.latitude),\n            lng: parseFloat(pos.longitude)\n          },\n          isLoading: false\n        });\n      });\n    });\n\n    this.state = {\n      user: null,\n      position: null,\n      isLoading: true\n    };\n  }\n\n  componentDidMount() {\n    this.location();\n  }\n\n  render() {\n    const {\n      location,\n      userData\n    } = this.state;\n    const {\n      children\n    } = this.props;\n    const configObject = {\n      location,\n      userData\n    };\n    return __jsx(UserContext.Provider, {\n      value: configObject,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 13\n      }\n    }, children);\n  }\n\n}\nexport default UserContext;","map":{"version":3,"sources":["/home/crmock/pideenlaequina/front/components/userContext.js"],"names":["React","Component","createContext","useContext","UserContext","UserProvider","constructor","props","navigator","geolocation","getCurrentPosition","position","setState","location","lat","coords","latitude","lng","longitude","err","ip","fetch","process","env","IPIFY_URL","then","response","text","pos","IPGEOLOCATION_API_URL","IPGEOLOCATION_API_KEY","json","parseFloat","isLoading","state","user","componentDidMount","render","userData","children","configObject"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,aAA3B,EAA0CC,UAA1C,QAA4D,OAA5D;AAEA,MAAMC,WAAW,GAAGF,aAAa,EAAjC,C,CAEA;;AACA,OAAO,MAAMG,YAAN,SAA2BJ,SAA3B,CAAqC;AAExCK,EAAAA,WAAW,CAACC,KAAD,EACX;AACI,UAAMA,KAAN;;AADJ,sCAcW,YAAY;AACnB,YAAMC,SAAS,CAACC,WAAV,CAAsBC,kBAAtB,CACJC,QAAQ,IAAI,KAAKC,QAAL,CAAc;AAAEC,QAAAA,QAAQ,EAAC;AACnCC,UAAAA,GAAG,EAAEH,QAAQ,CAACI,MAAT,CAAgBC,QADc;AAEnCC,UAAAA,GAAG,EAAEN,QAAQ,CAACI,MAAT,CAAgBG;AAFc;AAAX,OAAd,CADR,EAKJC,GAAG,IAAI,kBACP;AACE,YAAIC,EAAE,GAAG,MAAMC,KAAK,CAACC,OAAO,CAACC,GAAR,CAAYC,SAAb,CAAL,CAA6BC,IAA7B,CAAkCC,QAAQ,IAAEA,QAAQ,CAACC,IAAT,EAA5C,CAAf;AACA,YAAIC,GAAG,GAAG,MAAMP,KAAK,CAACC,OAAO,CAACC,GAAR,CAAYM,qBAAZ,GAAmC,gBAAnC,GAAoDP,OAAO,CAACC,GAAR,CAAYO,qBAAhE,GAAsF,MAAtF,GAA6FV,EAA9F,CAAL,CAAuGK,IAAvG,CAA4GC,QAAQ,IAAEA,QAAQ,CAACK,IAAT,EAAtH,CAAhB;AAEA,aAAKnB,QAAL,CAAc;AAAEC,UAAAA,QAAQ,EAAC;AAACC,YAAAA,GAAG,EAACkB,UAAU,CAACJ,GAAG,CAACZ,QAAL,CAAf;AAA+BC,YAAAA,GAAG,EAACe,UAAU,CAACJ,GAAG,CAACV,SAAL;AAA7C,WAAX;AAA0Ee,UAAAA,SAAS,EAAC;AAApF,SAAd;AACD,OAXG,CAAN;AAaD,KA5BH;;AAEI,SAAMC,KAAN,GAAc;AACVC,MAAAA,IAAI,EAAC,IADK;AAEVxB,MAAAA,QAAQ,EAAC,IAFC;AAGVsB,MAAAA,SAAS,EAAC;AAHA,KAAd;AAKH;;AAEDG,EAAAA,iBAAiB,GAAG;AAChB,SAAKvB,QAAL;AACH;;AAmBDwB,EAAAA,MAAM,GAAG;AACL,UAAM;AAAExB,MAAAA,QAAF;AAAYyB,MAAAA;AAAZ,QAAwB,KAAKJ,KAAnC;AACA,UAAM;AAAEK,MAAAA;AAAF,QAAe,KAAKhC,KAA1B;AAEA,UAAMiC,YAAY,GAAG;AACjB3B,MAAAA,QADiB;AAEjByB,MAAAA;AAFiB,KAArB;AAKA,WACI,MAAC,WAAD,CAAa,QAAb;AAAsB,MAAA,KAAK,EAAEE,YAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACKD,QADL,CADJ;AAKH;;AA/CuC;AAkD5C,eAAenC,WAAf","sourcesContent":["import React, { Component, createContext, useContext } from 'react';\n\nconst UserContext = createContext();\n\n// create a provider\nexport class UserProvider extends Component {\n   \n    constructor(props)\n    {\n        super(props)\n        this. state = {\n            user:null,\n            position:null,\n            isLoading:true,\n        }\n    }\n\n    componentDidMount() {\n        this.location();\n    }\n\n\n    location = async () => {\n        await navigator.geolocation.getCurrentPosition(\n          position => this.setState({ location:{\n            lat: position.coords.latitude, \n            lng: position.coords.longitude\n          }}), \n          err => async function()\n          {\n            let ip = await fetch(process.env.IPIFY_URL).then(response=>response.text())\n            let pos = await fetch(process.env.IPGEOLOCATION_API_URL +'/ipgeo?apiKey='+process.env.IPGEOLOCATION_API_KEY+'&ip='+ip).then(response=>response.json())\n        \n            this.setState({ location:{lat:parseFloat(pos.latitude), lng:parseFloat(pos.longitude)}, isLoading:false})\n          }\n        )\n      }\n\n    render() {\n        const { location, userData} = this.state;\n        const { children } = this.props\n\n        const configObject = { \n            location, \n            userData\n        }\n\n        return (\n            <UserContext.Provider value={configObject}>\n                {children}\n            </UserContext.Provider>\n        );\n    }\n}\n\nexport default UserContext;"]},"metadata":{},"sourceType":"module"}