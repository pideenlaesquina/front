{"ast":null,"code":"var _jsxFileName = \"/home/crmock/pideenlaequina/front/pages/index.js\";\nvar __jsx = React.createElement;\nimport React, { Component, Fragment } from 'react';\nimport Map from '../components/map.js';\nvar pos = null;\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      pos: null,\n      stores: []\n    };\n  }\n\n  componentDidMount() {\n    this.getPosition();\n  }\n\n  async getPosition() {\n    let ip = await fetch('https://api.ipify.org').then(response => response.text());\n    let pos = await fetch('https://api.ipgeolocation.io/ipgeo?apiKey=02ff42e6f29c453e8d60df6139f5f9ed&ip=' + ip).then(response => response.json());\n    let posFromIp = {\n      lat: parseFloat(pos.latitude),\n      lng: parseFloat(pos.longitude)\n    };\n\n    if (navigator.geolocation) {\n      let posFromBrowser = navigator.geolocation.getCurrentPosition(function (position) {\n        pos = {\n          lat: position.coords.latitude,\n          lng: position.coords.longitude\n        };\n        console.log(pos);\n        this.setState({\n          pos: pos\n        });\n      }, function () {});\n    } else {\n      this.setState({\n        pos: posFromIp\n      });\n    }\n  }\n\n  getUserPosition() {\n    let coordinates = null; //Updated from browser\n\n    if (navigator.geolocation) {\n      coordinates = navigator.geolocation.getCurrentPosition(function (position) {\n        console.log(this.pos);\n        return {\n          lat: position.coords.latitude,\n          lng: position.coords.longitude\n        };\n      }, function () {\n        return null;\n      });\n    }\n\n    console.log(coordinates);\n    return coordinates;\n  }\n\n  async getStores(pos) {\n    let url = '/api/stores?lat=' + pos.lat + '&lng=' + pos.lng;\n    let stores = await fetch(url).then(response => response.json());\n    return stores.stores;\n  }\n\n  render() {\n    return __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 7\n      }\n    }, __jsx(Map, {\n      pos: this.state.pos,\n      stores: this.state.stores,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/crmock/pideenlaequina/front/pages/index.js"],"names":["React","Component","Fragment","Map","pos","App","constructor","props","state","stores","componentDidMount","getPosition","ip","fetch","then","response","text","json","posFromIp","lat","parseFloat","latitude","lng","longitude","navigator","geolocation","posFromBrowser","getCurrentPosition","position","coords","console","log","setState","getUserPosition","coordinates","getStores","url","render"],"mappings":"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","sourcesContent":["import React, { Component, Fragment} from 'react'\nimport Map from '../components/map.js'\n\nvar pos=null;\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.state = { \n      pos:null,\n      stores:[]\n    }\n  }\n\n  componentDidMount() {\n    this.getPosition()\n  }\n\n  async getPosition()\n  {\n    let ip = await fetch('https://api.ipify.org').then(response=>response.text())\n    let pos = await fetch('https://api.ipgeolocation.io/ipgeo?apiKey=02ff42e6f29c453e8d60df6139f5f9ed&ip='+ip).then(response=>response.json())\n    \n    let posFromIp = {lat:parseFloat(pos.latitude), lng:parseFloat(pos.longitude)}\n\n    if (navigator.geolocation) \n    {\n      let posFromBrowser = navigator.geolocation.getCurrentPosition(\n        function(position) {\n          pos = {\n            lat: position.coords.latitude,\n            lng: position.coords.longitude\n          }\n          console.log(pos)\n          this.setState({ pos: pos })\n        }, \n        function() {}\n      )\n    }\n    else\n    {\n      this.setState({ pos: posFromIp })\n    }\n  }\n\n  getUserPosition()\n  {\n    let coordinates = null\n\n    //Updated from browser\n    if (navigator.geolocation) \n    {\n      coordinates = navigator.geolocation.getCurrentPosition(function(position) {\n        console.log(this.pos)\n        return({\n          lat: position.coords.latitude,\n          lng: position.coords.longitude\n        })\n      }, function() {\n        return null\n      })\n    }\n    console.log(coordinates)\n    return coordinates\n  }\n\n  async getStores(pos)\n  {\n    let url = '/api/stores?lat='+ pos.lat +'&lng='+pos.lng\n    let stores = await fetch(url).then(response=>response.json())\n    return stores.stores\n  }\n  \n  render() {\n    return (\n      <div>\n        <Map pos={this.state.pos} stores={this.state.stores}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}