{"ast":null,"code":"var _jsxFileName = \"/home/crmock/pideenlaequina/front/pages/index.js\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component, Fragment } from 'react';\nimport Map from '../components/map.js';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"position\", async () => {\n      await navigator.geolocation.getCurrentPosition(position => this.setState({\n        pos: {\n          lat: position.coords.latitude,\n          lng: position.coords.longitude\n        }\n      }), err => this.getPositionFromIp());\n      console.log(this.state.latitude);\n    });\n\n    this.state = {\n      pos: null,\n      stores: []\n    };\n  }\n\n  componentDidMount() {\n    this.position();\n  }\n\n  async getPosition() {\n    let ip = await fetch('https://api.ipify.org').then(response => response.text());\n    let pos = await fetch('https://api.ipgeolocation.io/ipgeo?apiKey=02ff42e6f29c453e8d60df6139f5f9ed&ip=' + ip).then(response => response.json());\n    this.setState({\n      pos: {\n        lat: parseFloat(pos.latitude),\n        lng: parseFloat(pos.longitude)\n      }\n    });\n  }\n\n  getUserPosition() {\n    let coordinates = null; //Updated from browser\n\n    if (navigator.geolocation) {\n      coordinates = navigator.geolocation.getCurrentPosition(function (position) {\n        console.log(this.pos);\n        return {\n          lat: position.coords.latitude,\n          lng: position.coords.longitude\n        };\n      }, function () {\n        return null;\n      });\n    }\n\n    console.log(coordinates);\n    return coordinates;\n  }\n\n  async getStores(pos) {\n    let url = '/api/stores?lat=' + pos.lat + '&lng=' + pos.lng;\n    let stores = await fetch(url).then(response => response.json());\n    return stores.stores;\n  }\n\n  render() {\n    return __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 7\n      }\n    }, __jsx(Map, {\n      pos: this.state.pos,\n      stores: this.state.stores,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/crmock/pideenlaequina/front/pages/index.js"],"names":["React","Component","Fragment","Map","App","constructor","props","navigator","geolocation","getCurrentPosition","position","setState","pos","lat","coords","latitude","lng","longitude","err","getPositionFromIp","console","log","state","stores","componentDidMount","getPosition","ip","fetch","then","response","text","json","parseFloat","getUserPosition","coordinates","getStores","url","render"],"mappings":"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","sourcesContent":["import React, { Component, Fragment} from 'react'\nimport Map from '../components/map.js'\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.state = { \n      pos:null,\n      stores:[]\n    }\n  }\n\n  componentDidMount() {\n    this.position()\n  }\n\n  async getPosition()\n  {\n    let ip = await fetch('https://api.ipify.org').then(response=>response.text())\n    let pos = await fetch('https://api.ipgeolocation.io/ipgeo?apiKey=02ff42e6f29c453e8d60df6139f5f9ed&ip='+ip).then(response=>response.json())\n    \n    this.setState({ pos:{lat:parseFloat(pos.latitude), lng:parseFloat(pos.longitude)} })\n  }\n\n  position = async () => {\n    await navigator.geolocation.getCurrentPosition(\n      position => this.setState({ pos:{\n        lat: position.coords.latitude, \n        lng: position.coords.longitude\n      }}), \n      err => this.getPositionFromIp()\n    );\n    console.log(this.state.latitude)\n  }\n\n  getUserPosition()\n  {\n    let coordinates = null\n\n    //Updated from browser\n    if (navigator.geolocation) \n    {\n      coordinates = navigator.geolocation.getCurrentPosition(function(position) {\n        console.log(this.pos)\n        return({\n          lat: position.coords.latitude,\n          lng: position.coords.longitude\n        })\n      }, function() {\n        return null\n      })\n    }\n    console.log(coordinates)\n    return coordinates\n  }\n\n  async getStores(pos)\n  {\n    let url = '/api/stores?lat='+ pos.lat +'&lng='+pos.lng\n    let stores = await fetch(url).then(response=>response.json())\n    return stores.stores\n  }\n  \n  render() {\n    return (\n      <div>\n        <Map pos={this.state.pos} stores={this.state.stores}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}