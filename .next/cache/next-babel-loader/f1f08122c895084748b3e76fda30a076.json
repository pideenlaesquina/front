{"ast":null,"code":"\"use strict\";\n\nvar _isomorphicUnfetch = _interopRequireDefault(require(\"isomorphic-unfetch\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nmodule.exports = async (req, res) => {\n  if (req.query.lat != null && req.query.lng != null) {\n    let querry_lat = parseFloat(req.query.lat);\n    let querry_lng = parseFloat(req.query.lng);\n    let url = process.env.GOOGLE_MAPS_API_URL + \"/geocode/json?latlng=\" + querry_lat + \",\" + querry_lng + \"&key=\" + process.env.GOOGLE_MAPS_API_KEY;\n    let res = await (0, _isomorphicUnfetch.default)(url);\n    let jres = await res.json();\n    let address = jres.results[0].formatted_address;\n    res.status(200).json({\n      address\n    });\n  } else {\n    res.status(400).json({\n      error: \"missing parameters\"\n    });\n  }\n};","map":{"version":3,"sources":["/home/crmock/pideenlaequina/front/pages/api/addressFromLocation.js"],"names":["module","exports","req","res","query","lat","lng","querry_lat","parseFloat","querry_lng","url","process","env","GOOGLE_MAPS_API_URL","GOOGLE_MAPS_API_KEY","jres","json","address","results","formatted_address","status","error"],"mappings":";;AAAA;;;;AAEAA,MAAM,CAACC,OAAP,GAAiB,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AACnC,MAAID,GAAG,CAACE,KAAJ,CAAUC,GAAV,IAAiB,IAAjB,IAAyBH,GAAG,CAACE,KAAJ,CAAUE,GAAV,IAAiB,IAA9C,EAAoD;AAClD,QAAIC,UAAU,GAAGC,UAAU,CAACN,GAAG,CAACE,KAAJ,CAAUC,GAAX,CAA3B;AACA,QAAII,UAAU,GAAGD,UAAU,CAACN,GAAG,CAACE,KAAJ,CAAUE,GAAX,CAA3B;AAEA,QAAII,GAAG,GAAGC,OAAO,CAACC,GAAR,CAAYC,mBAAZ,GAAkC,uBAAlC,GAA0DN,UAA1D,GAAqE,GAArE,GAAyEE,UAAzE,GAAoF,OAApF,GAA4FE,OAAO,CAACC,GAAR,CAAYE,mBAAlH;AAEA,QAAIX,GAAG,GAAG,MAAM,gCAAMO,GAAN,CAAhB;AACA,QAAIK,IAAI,GAAG,MAAMZ,GAAG,CAACa,IAAJ,EAAjB;AAEA,QAAIC,OAAO,GAAGF,IAAI,CAACG,OAAL,CAAa,CAAb,EAAgBC,iBAA9B;AAEAhB,IAAAA,GAAG,CAACiB,MAAJ,CAAW,GAAX,EAAgBJ,IAAhB,CAAqB;AAAEC,MAAAA;AAAF,KAArB;AACD,GAZD,MAaK;AACHd,IAAAA,GAAG,CAACiB,MAAJ,CAAW,GAAX,EAAgBJ,IAAhB,CAAqB;AAAEK,MAAAA,KAAK,EAAE;AAAT,KAArB;AACD;AACF,CAjBD","sourcesContent":["import fetch from 'isomorphic-unfetch'\n\nmodule.exports = async (req, res) => {\n  if (req.query.lat != null && req.query.lng != null) {\n    let querry_lat = parseFloat(req.query.lat)\n    let querry_lng = parseFloat(req.query.lng)\n    \n    let url = process.env.GOOGLE_MAPS_API_URL + \"/geocode/json?latlng=\"+querry_lat+\",\"+querry_lng+\"&key=\"+process.env.GOOGLE_MAPS_API_KEY\n\n    let res = await fetch(url)\n    let jres = await res.json()\n\n    let address = jres.results[0].formatted_address\n\n    res.status(200).json({ address })\n  }\n  else {\n    res.status(400).json({ error: \"missing parameters\" })\n  }\n}"]},"metadata":{},"sourceType":"script"}