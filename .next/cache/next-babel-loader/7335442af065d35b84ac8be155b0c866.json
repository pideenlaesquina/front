{"ast":null,"code":"var _jsxFileName = \"/home/crmock/pideenlaequina/front/pages/index.js\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component, Fragment } from 'react';\nimport Map from '../components/map.js';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"position\", async () => {\n      await navigator.geolocation.getCurrentPosition(position => this.setState({\n        pos: {\n          lat: position.coords.latitude,\n          lng: position.coords.longitude\n        }\n      }), err => async function () {\n        let ip = await fetch('https://api.ipify.org').then(response => response.text());\n        let pos = await fetch('https://api.ipgeolocation.io/ipgeo?apiKey=02ff42e6f29c453e8d60df6139f5f9ed&ip=' + ip).then(response => response.json());\n        this.setState({\n          pos: {\n            lat: parseFloat(pos.latitude),\n            lng: parseFloat(pos.longitude)\n          }\n        });\n      });\n      console.log(this.state.latitude);\n    });\n\n    this.state = {\n      pos: null,\n      stores: []\n    };\n  }\n\n  componentDidMount() {\n    this.position();\n  }\n\n  async getPositionFromIp() {}\n\n  getUserPosition() {\n    let coordinates = null; //Updated from browser\n\n    if (navigator.geolocation) {\n      coordinates = navigator.geolocation.getCurrentPosition(function (position) {\n        console.log(this.pos);\n        return {\n          lat: position.coords.latitude,\n          lng: position.coords.longitude\n        };\n      }, function () {\n        return null;\n      });\n    }\n\n    console.log(coordinates);\n    return coordinates;\n  }\n\n  async getStores(pos) {\n    let url = '/api/stores?lat=' + pos.lat + '&lng=' + pos.lng;\n    let stores = await fetch(url).then(response => response.json());\n    return stores.stores;\n  }\n\n  render() {\n    return __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 7\n      }\n    }, __jsx(Map, {\n      pos: this.state.pos,\n      stores: this.state.stores,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/crmock/pideenlaequina/front/pages/index.js"],"names":["React","Component","Fragment","Map","App","constructor","props","navigator","geolocation","getCurrentPosition","position","setState","pos","lat","coords","latitude","lng","longitude","err","ip","fetch","then","response","text","json","parseFloat","console","log","state","stores","componentDidMount","getPositionFromIp","getUserPosition","coordinates","getStores","url","render"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA0C,OAA1C;AACA,OAAOC,GAAP,MAAgB,sBAAhB;;AAEA,MAAMC,GAAN,SAAkBH,SAAlB,CAA4B;AAC1BI,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,sCAiBR,YAAY;AACrB,YAAMC,SAAS,CAACC,WAAV,CAAsBC,kBAAtB,CACJC,QAAQ,IAAI,KAAKC,QAAL,CAAc;AAAEC,QAAAA,GAAG,EAAC;AAC9BC,UAAAA,GAAG,EAAEH,QAAQ,CAACI,MAAT,CAAgBC,QADS;AAE9BC,UAAAA,GAAG,EAAEN,QAAQ,CAACI,MAAT,CAAgBG;AAFS;AAAN,OAAd,CADR,EAKJC,GAAG,IAAI,kBACP;AACE,YAAIC,EAAE,GAAG,MAAMC,KAAK,CAAC,uBAAD,CAAL,CAA+BC,IAA/B,CAAoCC,QAAQ,IAAEA,QAAQ,CAACC,IAAT,EAA9C,CAAf;AACA,YAAIX,GAAG,GAAG,MAAMQ,KAAK,CAAC,mFAAiFD,EAAlF,CAAL,CAA2FE,IAA3F,CAAgGC,QAAQ,IAAEA,QAAQ,CAACE,IAAT,EAA1G,CAAhB;AAEA,aAAKb,QAAL,CAAc;AAAEC,UAAAA,GAAG,EAAC;AAACC,YAAAA,GAAG,EAACY,UAAU,CAACb,GAAG,CAACG,QAAL,CAAf;AAA+BC,YAAAA,GAAG,EAACS,UAAU,CAACb,GAAG,CAACK,SAAL;AAA7C;AAAN,SAAd;AACD,OAXG,CAAN;AAaAS,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKC,KAAL,CAAWb,QAAvB;AACD,KAhCkB;;AAEjB,SAAKa,KAAL,GAAa;AACXhB,MAAAA,GAAG,EAAC,IADO;AAEXiB,MAAAA,MAAM,EAAC;AAFI,KAAb;AAID;;AAEDC,EAAAA,iBAAiB,GAAG;AAClB,SAAKpB,QAAL;AACD;;AAED,QAAMqB,iBAAN,GACA,CAEC;;AAmBDC,EAAAA,eAAe,GACf;AACE,QAAIC,WAAW,GAAG,IAAlB,CADF,CAGE;;AACA,QAAI1B,SAAS,CAACC,WAAd,EACA;AACEyB,MAAAA,WAAW,GAAG1B,SAAS,CAACC,WAAV,CAAsBC,kBAAtB,CAAyC,UAASC,QAAT,EAAmB;AACxEgB,QAAAA,OAAO,CAACC,GAAR,CAAY,KAAKf,GAAjB;AACA,eAAO;AACLC,UAAAA,GAAG,EAAEH,QAAQ,CAACI,MAAT,CAAgBC,QADhB;AAELC,UAAAA,GAAG,EAAEN,QAAQ,CAACI,MAAT,CAAgBG;AAFhB,SAAP;AAID,OANa,EAMX,YAAW;AACZ,eAAO,IAAP;AACD,OARa,CAAd;AASD;;AACDS,IAAAA,OAAO,CAACC,GAAR,CAAYM,WAAZ;AACA,WAAOA,WAAP;AACD;;AAED,QAAMC,SAAN,CAAgBtB,GAAhB,EACA;AACE,QAAIuB,GAAG,GAAG,qBAAoBvB,GAAG,CAACC,GAAxB,GAA6B,OAA7B,GAAqCD,GAAG,CAACI,GAAnD;AACA,QAAIa,MAAM,GAAG,MAAMT,KAAK,CAACe,GAAD,CAAL,CAAWd,IAAX,CAAgBC,QAAQ,IAAEA,QAAQ,CAACE,IAAT,EAA1B,CAAnB;AACA,WAAOK,MAAM,CAACA,MAAd;AACD;;AAEDO,EAAAA,MAAM,GAAG;AACP,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,GAAD;AAAK,MAAA,GAAG,EAAE,KAAKR,KAAL,CAAWhB,GAArB;AAA0B,MAAA,MAAM,EAAE,KAAKgB,KAAL,CAAWC,MAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF;AAKD;;AArEyB;;AAwE5B,eAAezB,GAAf","sourcesContent":["import React, { Component, Fragment} from 'react'\nimport Map from '../components/map.js'\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.state = { \n      pos:null,\n      stores:[]\n    }\n  }\n\n  componentDidMount() {\n    this.position()\n  }\n\n  async getPositionFromIp()\n  {\n    \n  }\n\n  position = async () => {\n    await navigator.geolocation.getCurrentPosition(\n      position => this.setState({ pos:{\n        lat: position.coords.latitude, \n        lng: position.coords.longitude\n      }}), \n      err => async function()\n      {\n        let ip = await fetch('https://api.ipify.org').then(response=>response.text())\n        let pos = await fetch('https://api.ipgeolocation.io/ipgeo?apiKey=02ff42e6f29c453e8d60df6139f5f9ed&ip='+ip).then(response=>response.json())\n    \n        this.setState({ pos:{lat:parseFloat(pos.latitude), lng:parseFloat(pos.longitude)} })\n      }\n    );\n    console.log(this.state.latitude)\n  }\n\n  getUserPosition()\n  {\n    let coordinates = null\n\n    //Updated from browser\n    if (navigator.geolocation) \n    {\n      coordinates = navigator.geolocation.getCurrentPosition(function(position) {\n        console.log(this.pos)\n        return({\n          lat: position.coords.latitude,\n          lng: position.coords.longitude\n        })\n      }, function() {\n        return null\n      })\n    }\n    console.log(coordinates)\n    return coordinates\n  }\n\n  async getStores(pos)\n  {\n    let url = '/api/stores?lat='+ pos.lat +'&lng='+pos.lng\n    let stores = await fetch(url).then(response=>response.json())\n    return stores.stores\n  }\n  \n  render() {\n    return (\n      <div>\n        <Map pos={this.state.pos} stores={this.state.stores}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}