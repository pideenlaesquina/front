{"version":3,"file":"static/webpack/static/development/pages/index.js.81c38dc5e4872fc3bad5.hot-update.js","sources":["webpack:///./components/Map.js"],"sourcesContent":["import React from 'react'\nimport Head from 'next/head'\nimport distance from './Distance'\n\nconst initialZoom = 15\n\nclass Map extends React.Component {\n\n  constructor(props)\n  {\n    super(props)\n    this.state = {\n      map: null,\n      userMarker:null,\n      storeMarkers:[],\n      selectedStore: null\n    }\n  }\n\n  shouldComponentUpdate() {\n    if(this.props.pos == null)\n    {\n      return false\n    }\n    return true\n  }\n\n  componentDidMount()\n  {\n    this.setState({map:null}) \n  }\n\n  componentDidUpdate(prevProps, prevState) \n  {\n    if(this.props.pos !== null && (this.props.stores !== null || this.props.selectedStore !== null) )\n    {\n      if(this.state.map === null)\n      {\n        let map=this.getMap(this.props.pos)\n        let userMarker=this.placeUserMarker(map, this.props.pos)\n        let storeMarkers=null \n        let selectedStore=null\n\n        if(this.props.stores!==null)\n        {\n          storeMarkers = this.placeAllStoreMarkers(map, this.props.stores)\n        }\n\n        if(this.props.selectedStore!==null)\n        {\n          selectedStore = this.placeAStoreMarker(map, this.props.selectedStore, true)\n        }\n\n        this.setState ({\n          userMarker:userMarker,\n          map: map,\n          storeMarkers: storeMarkers,\n          selectedStore: selectedStore\n        })\n      }\n      \n      if(this.state.map !== null && prevProps.pos !== this.props.pos)\n      {\n        let userMarker=this.placeUserMarker(this.state.map, this.props.pos)\n        this.removeAllStoreMarkers()\n\n        this.setState ({\n          userMarker:userMarker\n        })\n      }\n\n      if(this.state.map !== null && prevProps.stores !== this.props.stores)\n      {\n        this.removeAllStoreMarkers()\n        let storeMarkers = this.placeAllStoreMarkers(this.state.map, this.props.stores)\n\n        this.setState ({\n          storeMarkers: storeMarkers\n        })\n      }\n      \n      if(this.state.map !== null && prevProps.selectedStore !== this.props.selectedStore)\n      {\n        this.removeSelectedStoreMarker()\n        let selectedStore = this.placeAStoreMarker(this.state.map, this.props.selectedStore)\n\n        this.setState ({\n          selectedStore: selectedStore\n        })\n      }\n    }\n  }\n\n  getMap(pos)\n  {\n    let map = null\n    if(this.state.map == null)\n    {\n      map = new google.maps.Map(document.getElementById('map'), {\n        center: pos,\n        zoom: initialZoom,\n        zoomControl:false,\n        mapTypeControl: false,\n        fullscreenControl: false,\n        clickableIcons: false,\n        streetViewControl: false\n      })\n    }\n    else\n    {\n      map = this.state.map\n    }\n    return map\n  }\n\n  placeUserMarker(map, pos, pan=true)\n  {\n    if(this.state.userMarker != null)\n    {\n      this.state.userMarker.setMap(null);\n    }\n\n    let marker = new google.maps.Marker({\n      position: pos,\n      icon: './map/user_icon.svg',\n      title: \"Tu ubicación\",\n      draggable:false,\n    })\n\n    marker.setMap(map);\n\n    if(pan)\n    {\n      this.panToPos(map, pos)\n    }\n\n    return marker\n  }\n\n  panToPos(map, pos, zoom=initialZoom)\n  {\n    map.setZoom(zoom);\n    map.panTo(pos);\n  }\n\n  placeAllStoreMarkers(map, stores)\n  {\n    let list = []\n    \n    for (let i = 0; i < stores.length; i++) {\n      let store = stores[i]\n      if(store._id == null || store.lat == null || store.lng == null || store.name == null)\n      {\n        console.log(\"Skiped store: \"+store.name)\n        continue\n      }\n\n      let marker = this.placeAStoreMarker(map, store)\n      list.push(marker)\n    }\n\n    return list\n  }\n\n  removeAllStoreMarkers()\n  {\n    for (let i = 0; i < this.state.storeMarkers.length; i++)\n    {\n      this.state.storeMarkers[i].setMap(null)\n    }\n  }\n\n  removeSelectedStoreMarker()\n  {\n    this.state.selectedStore.setMap(null)\n  }\n\n  placeAStoreMarker(map, store, selected=false)\n  {\n    categories=[\n      'pharmacy', \n      'bakery', \n      'vegetableStore', \n      'hardwareStore',\n      'butchery', \n      'drycleaner',\n      'stationeryStore',\n      'petStore',\n      'liquorStore',\n      'fastFood',\n      'restaurant',\n      'groeceryStore',\n      'store'\n    ]\n\n    labels=[\n      'Droguería',\n      'Panadería',\n      'Fruver',\n      'Ferretería',\n      'Carnicería',\n      'Lavandería',\n      'Papelería',\n      'Mascotas',\n      'Licorera',\n      'Comida rápida',\n      'Restaurante',\n      'Tienda',\n      'Otro'\n    ]\n\n    if(store.type===null)\n    {\n      store.type=\"store\"\n    }\n\n    if(!allCategories.includes(store.type))\n    {\n      store.type=\"store\"\n    }\n    \n    let i = categories.indexOf(store.type)\n    store.typeLabel = label[i]\n\n    let icon = '';\n    if(selected)\n    {\n      icon = './map/' + store.type + \"_icon_selected.svg\";\n    }\n    else\n    {\n      icon = './map/' + store.type + \"_icon.svg\";\n    }\n    let icon_hover = './map/' + store.type + \"_icon_hover.svg\";\n    \n    let marker = new google.maps.Marker({\n      position: {lat:store.lat, lng:store.lng},\n      icon: icon,\n      title:store.name,\n      draggable:false,\n      //custom data\n      selected:selected,\n      id:store._id,\n      distance:distance(this.props.pos.lat, this.props.pos.lng, store.lat, store.lng)\n    })\n\n    google.maps.event.addListener(marker, 'click', function() {\n      if(!marker.selected)\n      {\n        this.handleStoreMarkerClick(marker.id);\n      }\n    })\n\n    google.maps.event.addListener(marker, 'mouseover', function() {\n      marker.setIcon(icon_hover);\n    })\n\n    google.maps.event.addListener(marker, 'mouseout', function() {\n      marker.setIcon(icon);    \n    })\n\n    marker.setMap(map)\n    return marker\n  }\n\n  findStore(id)\n  {\n    for (let i = 0; i < this.props.stores.length; i++) {\n      const element = this.props.stores[i];\n\n      if(element._id === id)\n      {\n        return element\n      }\n    }\n    return null\n  }\n\n  handleStoreMarkerClick(id)\n  {\n    alert(\"ya merito\")\n    let store = this.findStore()\n\n    if(store !== null)\n    {\n      alert(\"ya mero merito\")\n      this.props.openSelectedStore(store)\n    }\n  }\n\n  render () {\n    let google_url = 'https://maps.googleapis.com/maps/api/js?key=AIzaSyBt0ZCE1kAklBJiBnCYGX6kl0tglLcKlLI'\n\n    return (\n      <div style={{height:\"100%\", width:'100%'}}>\n        <Head>\n          <script src={google_url} ></script>\n        </Head>\n        <div id=\"map\" style={{height:\"100%\", width:'100%'}}></div>\n      </div>\n    )\n  }\n}\n\nexport default Map\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAEA;AACA;AACA;;;;;AAEA;AACA;AACA;AADA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAJA;AAFA;AAQA;AACA;;;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;;;AAGA;AACA;AAAA;AAAA;AACA;;;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AAEA;AACA;AAAA;AAEA;AACA;AADA;AAGA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;;;AAEA;AAEA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AAGA;AACA;AACA;AAAA;AACA;;;AAEA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;;;AAEA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AAEA;AACA;AACA;;;AAGA;AACA;AACA;;;AAEA;AACA;AACA;AAgBA;AACA;AAeA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAEA;AACA;AAGA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAWA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;;;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;;;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;;AAEA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;;;;AAvSA;AACA;AAySA;;;;A","sourceRoot":""}