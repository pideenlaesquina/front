{"version":3,"file":"static/webpack/static/development/pages/index.js.04ac86fa69e42008ff27.hot-update.js","sources":["webpack:///./pages/index.js"],"sourcesContent":["import React, { Component } from 'react'\nimport ReactDOM from 'react-dom';\nimport Loading from '../components/Loading';\nimport Ready from '../components/Ready';\nimport createAuth0Client from '@auth0/auth0-spa-js';\n\nclass Index extends Component {\n   \n  constructor(props)\n  {\n    super(props)\n    this. state = {\n      deviceLocation:null,\n      selectedLocation:null,\n\n      featuredStores:null,\n      stores:null,\n      orders:null,\n\n      authClient: null,\n      isAuthenticated: false,\n      user:null,\n\n      isReady:false\n    }\n  }\n\n  componentDidMount() {\n    this.deviceLocation()\n    this.initializeAuth0()\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if(this.state.authClient!==null\n      && this.state.deviceLocation!==null\n      && this.state.selectedLocation===null)\n    { \n      let location = null\n      if(this.state.user!==null\n        && this.state.user.addresses!==null\n        && this.state.user.addresses!==[])\n      {\n        location = this.state.user.addresses[0]\n      }\n      else\n      {\n        location = this.state.deviceLocation\n      }\n      this.updateSelectedLocation(location.lat, location.lng, location.address, location.type)\n    }\n    \n    if(this.state.selectedLocation !== null  \n      && JSON.stringify(prevState.selectedLocation) !== JSON.stringify(this.state.selectedLocation) )\n    {\n      this.featuredStores(this.state.selectedLocation.lat, this.state.selectedLocation.lng)\n      this.stores(this.state.selectedLocation.lat, this.state.selectedLocation.lng)\n    }\n\n    if(\n      !this.state.isReady \n      && this.state.selectedLocation !== null\n      && this.state.stores !== null\n      && this.state.featuredStores !== null)\n    {\n      this.setState({ isReady:true })\n    }\n  }\n  \n  deviceLocation = async () => {\n    await navigator.geolocation.getCurrentPosition(\n      position => this.locationFromBrowser(position), \n      err => this.locationFromIp()\n    )\n  }\n\n  updateSelectedLocation(newLat, newLng, address, type)\n  {\n    let location = {\n      lat:parseFloat(newLat), \n      lng:parseFloat(newLng),\n      address: address,\n      type: type\n    }\n    \n    this.setState({ \n      selectedLocation:location\n    })\n\n    //localStorage.setItem('_selectedLocationL', location)  \n  }\n\n  updateDeviceLocation(newLat, newLng, address)\n  {\n    let location = {\n      lat:parseFloat(newLat), \n      lng:parseFloat(newLng),\n      address: address,\n      type: \"device\"\n    }\n    \n    this.setState({ \n      deviceLocation:location\n    })\n\n    //localStorage.setItem('_deviceLocation', location)  \n  }\n\n  initializeAuth0 = async () => {\n    const config = {\n      domain: 'acacerca.auth0.com',//process.env.AUTH0_DOMAIN,\n      client_id: 'd8Pv88MjaYWNSUKUHnO9JcudrUPZ6THl',//process.env.AUTH0_CLIENT_ID,\n      redirect_uri: window.location.origin,\n      cacheLocation: 'localstorage'\n    }\n\n    const auth0Client = await createAuth0Client(config)\n    const isAuthenticated = await auth0Client.isAuthenticated()\n    const user = isAuthenticated ? await auth0Client.getUser() : null\n\n    this.setState({ authClient:auth0Client, isAuthenticated, user })\n  }\n\n  async locationFromIp()\n  {\n    let url = '/api/locationFromIp'\n    let res = await fetch(url).then(response=>response.json())\n    let address = await this.addressFromLocation(lat,lng)\n\n    this.updateDeviceLocation(res.location.lat, res.location.lng, address)\n  }\n\n  async locationFromBrowser(position)\n  {\n    let lat = position.coords.latitude\n    let lng = position.coords.longitude\n    let address = await this.addressFromLocation(lat,lng)\n\n    this.updateDeviceLocation(lat, lng, address)\n  }\n\n  async addressFromLocation(lat, lng)\n  {\n    let url = '/api/addressFromLocation?lat='+ lat +'&lng='+lng\n    let res = await fetch(url).then(response=>response.json())\n\n    return res.address\n  }\n\n  async featuredStores(lat, lng)\n  {\n    let url = '/api/featuredStores?lat='+ lat +'&lng='+lng\n    let res = await fetch(url).then(response=>response.json())\n    \n    this.setState({ featuredStores:res.stores })\n    //localStorage.setItem('_featuredStores', JSON.stringify(res.stores))  \n  }\n\n  async stores(lat, lng)\n  {\n    let url = '/api/stores?lat='+ lat +'&lng='+lng\n    let res = await fetch(url).then(response=>response.json())\n    \n    this.setState({ stores:res.stores })\n    //localStorage.setItem('_stores', JSON.stringify(res.stores))  \n  }\n\n  render() {\n    const { \n      deviceLocation,\n      selectedLocation,\n      featuredStores,\n      stores,\n      orders,\n\n      authClient,\n      isAuthenticated,\n      user,\n\n      isReady\n    } = this.state;\n\n    const values = { \n      deviceLocation,\n      selectedLocation,\n      featuredStores,\n      stores,\n      orders,\n\n      isAuthenticated,\n      user,\n\n      isReady,\n\n      loginWithRedirect: (...p) => authClient.loginWithRedirect(...p),\n      getTokenSilently: (...p) => authClient.getTokenSilently(...p),\n      getIdTokenClaims: (...p) => authClient.getIdTokenClaims(...p),\n      logout: (...p) => authClient.logout(...p)\n    }\n\n    let google_url = 'https://maps.googleapis.com/maps/api/js?key=AIzaSyBt0ZCE1kAklBJiBnCYGX6kl0tglLcKlLI'\n    \n    return(\n      <div>\n        <Head>\n          <script type=\"text/javascript\" src={google_url} ></script>\n        </Head>\n        {(\n          !this.state.isReady\n          ?<Loading/>\n          :<Ready {...values}/>\n        )}\n      </div>\n    )\n  }\n}\n\nexport default Index\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AAEA;AACA;AACA;AADA;AACA;AAAA;AACA;AAFA;AA2DA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AA5DA;AAkGA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAJA;AADA;AAAA;AACA;AADA;AAQA;AARA;AAAA;AACA;AADA;AASA;AACA;AAVA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAUA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAbA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAjGA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAZA;AAFA;AAgBA;AACA;;;AACA;AACA;AACA;AACA;;;AAEA;AACA;AAIA;AACA;AAAA;AAIA;AACA;AAGA;AACA;AACA;AAAA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAMA;AAAA;AAAA;AACA;AACA;;;AASA;AAEA;AACA;AACA;AACA;AACA;AAJA;AAOA;AACA;AADA;AAKA;;;AAEA;AAEA;AACA;AACA;AACA;AACA;AAJA;AAOA;AACA;AADA;AAKA;;;;;;;;;AAmBA;;AACA;AAAA;AAAA;AACA;;AADA;;AACA;AACA;;AADA;AAEA;AACA;;;;;;;;;;AAEA;;;;;;AAEA;AACA;;AACA;AACA;;AADA;AAEA;AACA;;;;;;;;;;AAEA;;;;;;AAEA;;AACA;AAAA;AAAA;AACA;;AADA;AAEA;AACA;;;;;;;;;;AAEA;;;;;;AAEA;;AACA;AAAA;AAAA;AACA;;AADA;AAEA;AAAA;AAAA;AACA;;;;;;;;;;AAGA;;;;;;AAEA;;AACA;AAAA;AAAA;AACA;;AADA;AAEA;AAAA;AAAA;AACA;;;;;;;;;;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAeA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAfA;AAkBA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;;;;AA/MA;AACA;AAiNA;;;;A","sourceRoot":""}