{"version":3,"file":"static/webpack/static/development/pages/_app.js.4d024f2530ccf85fcbab.hot-update.js","sources":["webpack:///./components/ContextProvider.js"],"sourcesContent":["import React, { Component, createContext } from 'react';\n\nimport Context from \"./Context\"\nimport createAuth0Client from '@auth0/auth0-spa-js';\n\n// create a provider\nclass ContextProvider extends Component {\n   \n  constructor(props)\n  {\n    super(props)\n    this. state = {\n      location:null,\n      address:null,\n\n      featuredStores:null,\n      stores:null,\n\n      authClient: null,\n      isAuthenticated: false,\n      user:null,\n\n      isReady:false\n    }\n    \n    this.startedAt = new Date()\n  }\n\n  componentDidMount() {\n    this.initialLocation()\n    this.initializeAuth0()\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if(this.state.location != null  \n      && (prevState.location != this.state.location))\n    {\n      this.featuredStores(this.state.location.lat, this.state.location.lng)\n      this.stores(this.state.location.lat, this.state.location.lng)\n      this.addressFromIp(this.state.location.lat, this.state.location.lng)\n    }\n\n    if(\n        !this.state.isReady \n        && this.state.location !=null\n        && this.state.address !=null\n        && this.state.stores != null\n        && this.state.featuredStores != null\n        && this.state.authClient!=null)\n    {\n      let now = new Date()\n      let towait = 2000 - (now.getTime() - this.startedAt.getTime())\n      \n      if(towait>0)\n      {\n        setTimeout(() => {\n          this.setState({ isReady:true })\n        }, towait)\n      }\n      else\n      {\n        this.setState({ isReady:true })\n      }\n    }\n  }\n  \n  initialLocation = async () => {\n    await navigator.geolocation.getCurrentPosition(\n      position => this.setState({ \n        location:{\n          lat:position.coords.latitude, \n          lng:position.coords.longitude\n        }\n      }), \n      err => this.locationFromIp()\n    )\n  }\n\n  updateLocation(newLat, newLng)\n  {\n    this.setState({ \n      location:{\n        lat:parseFloat(newLat), \n        lng:parseFloat(newLng)\n      }\n    })\n\n    localStorage.setItem('_selectedLocationLat', newLat)  \n  }\n\n  initializeAuth0 = async () => {\n    const config = {\n      domain: 'acacerca.auth0.com',//process.env.AUTH0_DOMAIN,\n      client_id: 'd8Pv88MjaYWNSUKUHnO9JcudrUPZ6THl',//process.env.AUTH0_CLIENT_ID,\n      redirect_uri: window.location.origin,\n      cacheLocation: 'localstorage'\n    }\n\n    const auth0Client = await createAuth0Client(config)\n    const isAuthenticated = await auth0Client.isAuthenticated()\n    const user = isAuthenticated ? await auth0Client.getUser() : null\n\n    this.setState({ authClient:auth0Client, isAuthenticated, user })\n  }\n\n  async locationFromIp()\n  {\n    let url = '/api/locationFromIp'\n    let res = await fetch(url).then(response=>response.json())\n\n    this.setState({ location:res.location })\n  }\n\n  async addressFromLocation(lat, lng)\n  {\n    let url = '/api/addressFromLocation?lat='+ lat +'&lng='+lng\n    let res = await fetch(url).then(response=>response.json())\n\n    this.setState({ address:res.address })\n  }\n\n  async featuredStores(lat, lng)\n  {\n    let url = '/api/featuredStores?lat='+ lat +'&lng='+lng\n    let res = await fetch(url).then(response=>response.json())\n    \n    this.setState({ featuredStores:res.stores })\n    //localStorage.setItem('_featuredStores', JSON.stringify(res.stores))  \n  }\n\n  async stores(lat, lng)\n  {\n    let url = '/api/stores?lat='+ lat +'&lng='+lng\n    let res = await fetch(url).then(response=>response.json())\n    \n    this.setState({ stores:res.stores })\n    //localStorage.setItem('_stores', JSON.stringify(res.stores))  \n  }\n\n  render() {\n    const { \n      location,\n      address,\n      featuredStores,\n      stores,\n\n      authClient,\n      isAuthenticated,\n      user,\n\n      isReady\n    } = this.state;\n\n    const values = { \n      location,\n      address,\n      featuredStores,\n      stores,\n\n      isAuthenticated,\n      user,\n\n      isReady,\n\n      loginWithRedirect: (...p) => authClient.loginWithRedirect(...p),\n      getTokenSilently: (...p) => authClient.getTokenSilently(...p),\n      getIdTokenClaims: (...p) => authClient.getIdTokenClaims(...p),\n      logout: (...p) => authClient.logout(...p)\n    }\n  \n    return (<Context.Provider value={values}>{this.props.children}</Context.Provider>);\n  }\n}\n\nexport default ContextProvider"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAEA;AACA;AACA;AAEA;;;;;AAEA;AACA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAyDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAFA;AADA;AAAA;AAMA;AAAA;AACA;AATA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AA1DA;AAiFA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAJA;AADA;AAAA;AACA;AADA;AAQA;AARA;AAAA;AACA;AADA;AASA;AACA;AAVA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAUA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAbA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAhFA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAXA;AAcA;AAhBA;AAiBA;AACA;;;AACA;AACA;AACA;AACA;;;AAEA;AAAA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AAQA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AAGA;AAAA;AAAA;AACA;AACA;AACA;;;AAcA;AAEA;AACA;AACA;AACA;AAFA;AADA;AAOA;AACA;;;;;;;;;AAmBA;;AACA;AAAA;AAAA;AACA;;AADA;AAEA;AAAA;AAAA;AACA;;;;;;;;;;AAEA;;;;;;AAEA;;AACA;AAAA;AAAA;AACA;;AADA;AAEA;AAAA;AAAA;AACA;;;;;;;;;;AAEA;;;;;;AAEA;;AACA;AAAA;AAAA;AACA;;AADA;AAEA;AAAA;AAAA;AACA;;;;;;;;;;AAGA;;;;;;AAEA;;AACA;AAAA;AAAA;AACA;;AADA;AAEA;AAAA;AAAA;AACA;;;;;;;;;;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAcA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAdA;AAiBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;AArKA;AACA;AAuKA;;;;A","sourceRoot":""}